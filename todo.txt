- now
	- figure out how to do entity_manager::get_camera (separate camera_manager?)

- soon
	- input service
	- deferred renderer
	- scene graph

- later
	- mesh_manager::load (formats? animation?)
	- asset_manager::load_mesh
	- mesh_watcher
	- mesh_manager::reload/rename
	- physics_manager/physics_service
	- load powertranzphormr scenes
	- distribution asset pipeline
	- virtual filesystem

- even later
	- per-camera effects
	- audio_manager/audio_watcher

- !important
	- global GL_* constants in js?
	- on app exit, throw error if assets not destroyed

