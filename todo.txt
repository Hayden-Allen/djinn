- questions
	- reset ids on scene switch?
	- enforce all pos/rot/scale changes be done in __main?
	- mesh_instance dirty flag/call mesh_instance_batch::update when transform changed?

- now
	- shaders::preprocess_frag (move light stuff here)
	- lights
		- light_manager has ubo
		- light_manager is an indexed_list containing up to (c::shader::ubo_size_bytes / sizeof(mgl::light)) lights (85)
		- all lights are updated each frame and sent to ubo
		- ubo bound at c::uniform::light_ubo_index (11)
		- in djinn::shaders(): uniform_block_binding(c::uniform::light_block_name, c::uniform::light_ubo_index)
		- djinn::light extends visibility_scene_object
	- scene graph
	- powertranzphormr
		- mgl::input_file => haul::input_file
		- no lightmaps, shadows, atlas
		- everything with an id or 1+ tags is exported separately (from root down)
		- static meshes, lights, waypoints always exported
		- export transform with render object
		- each phorm has map<mtl id, render object> generated by scene_ctx::tesselate_external
		- all of scene_ctx::m_mtls written out
	- retained_buffer::load => buffer::load (buffer doesn't get save though)
	- load/save take haul::input_file* const

	- load powertranzphormr scenes
		- phorm_object extends scene_object that has static_render_object
		- each exported mesh will be its own phorm_object
		- no hitboxes - up to the user
		- Scene.Physics.createAABB/createCapsule/createBVH that take a mesh or phorm_object
		- provide library class to package phorm_object and physics_object
	- physics_object::set_active
	- Scene.destroySelf()
	- mesh_watcher_base/static_mesh_watcher/animated_mesh_watcher
	- mesh_instance_batch testing
		- create instances with different shaders
		- removing works at all
		- removing instance at capacity threshold deletes now-unused ubo
		- removing all instances using a shader deletes that instance

- later
	- framebuffer_u8/f32?
	- deferred renderer
	- scene graph/multiple cameras
	- visibility mask (Scene.MeshInstance.setVisible) camera mask?
	- move to mgl::layer system
	- distribution asset pipeline
	- virtual filesystem

- even later
	- per-camera effects


