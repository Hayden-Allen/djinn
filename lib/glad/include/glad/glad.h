#ifdef GLAD_WRAPPER_ENABLED
#ifndef _WIN32
#define __debugbreak __builtin_debugtrap
#endif
#endif

/*

    OpenGL loader generated by glad 0.1.35 on Wed Jun  1 23:34:44 2022.

    Language/Generator: C/C++
    Specification: gl
    APIs: gl=4.6
    Profile: core
    Extensions:
        
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="core" --api="gl=4.6" --generator="c" --spec="gl" --extensions=""
    Online:
        https://glad.dav1d.de/#profile=core&language=c&specification=gl&loader=on&api=gl%3D4.6
*/


#ifndef __glad_h_
#define __glad_h_

#ifdef __gl_h_
#error OpenGL header already included, remove this include, glad already provides it
#endif
#define __gl_h_

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define APIENTRY __stdcall
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY APIENTRY
#endif

#ifdef __cplusplus
extern "C" {
#endif

struct gladGLversionStruct {
    int major;
    int minor;
};

typedef void* (* GLADloadproc)(const char *name);

#ifndef GLAPI
# if defined(GLAD_GLAPI_EXPORT)
#  if defined(_WIN32) || defined(__CYGWIN__)
#   if defined(GLAD_GLAPI_EXPORT_BUILD)
#    if defined(__GNUC__)
#     define GLAPI __attribute__ ((dllexport)) extern
#    else
#     define GLAPI __declspec(dllexport) extern
#    endif
#   else
#    if defined(__GNUC__)
#     define GLAPI __attribute__ ((dllimport)) extern
#    else
#     define GLAPI __declspec(dllimport) extern
#    endif
#   endif
#  elif defined(__GNUC__) && defined(GLAD_GLAPI_EXPORT_BUILD)
#   define GLAPI __attribute__ ((visibility ("default"))) extern
#  else
#   define GLAPI extern
#  endif
# else
#  define GLAPI extern
# endif
#endif

GLAPI struct gladGLversionStruct GLVersion;

GLAPI int gladLoadGL(void);

GLAPI int gladLoadGLLoader(GLADloadproc);

#include <KHR/khrplatform.h>
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (APIENTRY *GLVULKANPROCNV)(void);
typedef GLenum (APIENTRYP PFNGLGETERRORPROC)(void);
GLAPI PFNGLGETERRORPROC glad_glGetError;
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_CLEAR_TEXTURE 0x9365
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_CONTEXT_LOST 0x0507
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_COLOR_TABLE 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_HISTOGRAM 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_MINMAX 0x802E
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#ifndef GL_VERSION_1_0
#define GL_VERSION_1_0 1
GLAPI int GLAD_GL_VERSION_1_0;
typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
GLAPI PFNGLCULLFACEPROC glad_glCullFace;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCullFace(GLenum mode) {
  glad_glCullFace(mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCullFace\n", error);
    __debugbreak();
  }
}
#else
void glCullFace(GLenum mode);
#endif
#else
#define glCullFace glad_glCullFace
#endif
typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);
GLAPI PFNGLFRONTFACEPROC glad_glFrontFace;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFrontFace(GLenum mode) {
  glad_glFrontFace(mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFrontFace\n", error);
    __debugbreak();
  }
}
#else
void glFrontFace(GLenum mode);
#endif
#else
#define glFrontFace glad_glFrontFace
#endif
typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
GLAPI PFNGLHINTPROC glad_glHint;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glHint(GLenum target, GLenum mode) {
  glad_glHint(target, mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glHint\n", error);
    __debugbreak();
  }
}
#else
void glHint(GLenum target, GLenum mode);
#endif
#else
#define glHint glad_glHint
#endif
typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
GLAPI PFNGLLINEWIDTHPROC glad_glLineWidth;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glLineWidth(GLfloat width) {
  glad_glLineWidth(width);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glLineWidth\n", error);
    __debugbreak();
  }
}
#else
void glLineWidth(GLfloat width);
#endif
#else
#define glLineWidth glad_glLineWidth
#endif
typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
GLAPI PFNGLPOINTSIZEPROC glad_glPointSize;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPointSize(GLfloat size) {
  glad_glPointSize(size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPointSize\n", error);
    __debugbreak();
  }
}
#else
void glPointSize(GLfloat size);
#endif
#else
#define glPointSize glad_glPointSize
#endif
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLAPI PFNGLPOLYGONMODEPROC glad_glPolygonMode;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPolygonMode(GLenum face, GLenum mode) {
  glad_glPolygonMode(face, mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPolygonMode\n", error);
    __debugbreak();
  }
}
#else
void glPolygonMode(GLenum face, GLenum mode);
#endif
#else
#define glPolygonMode glad_glPolygonMode
#endif
typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORPROC glad_glScissor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glScissor(x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glScissor\n", error);
    __debugbreak();
  }
}
#else
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glScissor glad_glScissor
#endif
typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  glad_glTexParameterf(target, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexParameterf\n", error);
    __debugbreak();
  }
}
#else
void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
#endif
#else
#define glTexParameterf glad_glTexParameterf
#endif
typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
GLAPI PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  glad_glTexParameterfv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
#endif
#else
#define glTexParameterfv glad_glTexParameterfv
#endif
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexParameteri(GLenum target, GLenum pname, GLint param) {
  glad_glTexParameteri(target, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexParameteri\n", error);
    __debugbreak();
  }
}
#else
void glTexParameteri(GLenum target, GLenum pname, GLint param);
#endif
#else
#define glTexParameteri glad_glTexParameteri
#endif
typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLAPI PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
  glad_glTexParameteriv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
#endif
#else
#define glTexParameteriv glad_glTexParameteriv
#endif
typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
  glad_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexImage1D\n", error);
    __debugbreak();
  }
}
#else
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTexImage1D glad_glTexImage1D
#endif
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
  glad_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexImage2D\n", error);
    __debugbreak();
  }
}
#else
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTexImage2D glad_glTexImage2D
#endif
typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
GLAPI PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawBuffer(GLenum buf) {
  glad_glDrawBuffer(buf);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawBuffer\n", error);
    __debugbreak();
  }
}
#else
void glDrawBuffer(GLenum buf);
#endif
#else
#define glDrawBuffer glad_glDrawBuffer
#endif
typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
GLAPI PFNGLCLEARPROC glad_glClear;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClear(GLbitfield mask) {
  glad_glClear(mask);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClear\n", error);
    __debugbreak();
  }
}
#else
void glClear(GLbitfield mask);
#endif
#else
#define glClear glad_glClear
#endif
typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARCOLORPROC glad_glClearColor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  glad_glClearColor(red, green, blue, alpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearColor\n", error);
    __debugbreak();
  }
}
#else
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#endif
#else
#define glClearColor glad_glClearColor
#endif
typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
GLAPI PFNGLCLEARSTENCILPROC glad_glClearStencil;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearStencil(GLint s) {
  glad_glClearStencil(s);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearStencil\n", error);
    __debugbreak();
  }
}
#else
void glClearStencil(GLint s);
#endif
#else
#define glClearStencil glad_glClearStencil
#endif
typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHPROC glad_glClearDepth;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearDepth(GLdouble depth) {
  glad_glClearDepth(depth);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearDepth\n", error);
    __debugbreak();
  }
}
#else
void glClearDepth(GLdouble depth);
#endif
#else
#define glClearDepth glad_glClearDepth
#endif
typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
GLAPI PFNGLSTENCILMASKPROC glad_glStencilMask;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glStencilMask(GLuint mask) {
  glad_glStencilMask(mask);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glStencilMask\n", error);
    __debugbreak();
  }
}
#else
void glStencilMask(GLuint mask);
#endif
#else
#define glStencilMask glad_glStencilMask
#endif
typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLCOLORMASKPROC glad_glColorMask;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  glad_glColorMask(red, green, blue, alpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glColorMask\n", error);
    __debugbreak();
  }
}
#else
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
#endif
#else
#define glColorMask glad_glColorMask
#endif
typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
GLAPI PFNGLDEPTHMASKPROC glad_glDepthMask;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDepthMask(GLboolean flag) {
  glad_glDepthMask(flag);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDepthMask\n", error);
    __debugbreak();
  }
}
#else
void glDepthMask(GLboolean flag);
#endif
#else
#define glDepthMask glad_glDepthMask
#endif
typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
GLAPI PFNGLDISABLEPROC glad_glDisable;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDisable(GLenum cap) {
  glad_glDisable(cap);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDisable\n", error);
    __debugbreak();
  }
}
#else
void glDisable(GLenum cap);
#endif
#else
#define glDisable glad_glDisable
#endif
typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);
GLAPI PFNGLENABLEPROC glad_glEnable;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEnable(GLenum cap) {
  glad_glEnable(cap);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEnable\n", error);
    __debugbreak();
  }
}
#else
void glEnable(GLenum cap);
#endif
#else
#define glEnable glad_glEnable
#endif
typedef void (APIENTRYP PFNGLFINISHPROC)(void);
GLAPI PFNGLFINISHPROC glad_glFinish;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFinish(void) {
  glad_glFinish();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFinish\n", error);
    __debugbreak();
  }
}
#else
void glFinish(void);
#endif
#else
#define glFinish glad_glFinish
#endif
typedef void (APIENTRYP PFNGLFLUSHPROC)(void);
GLAPI PFNGLFLUSHPROC glad_glFlush;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFlush(void) {
  glad_glFlush();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFlush\n", error);
    __debugbreak();
  }
}
#else
void glFlush(void);
#endif
#else
#define glFlush glad_glFlush
#endif
typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLAPI PFNGLBLENDFUNCPROC glad_glBlendFunc;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendFunc(GLenum sfactor, GLenum dfactor) {
  glad_glBlendFunc(sfactor, dfactor);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendFunc\n", error);
    __debugbreak();
  }
}
#else
void glBlendFunc(GLenum sfactor, GLenum dfactor);
#endif
#else
#define glBlendFunc glad_glBlendFunc
#endif
typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
GLAPI PFNGLLOGICOPPROC glad_glLogicOp;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glLogicOp(GLenum opcode) {
  glad_glLogicOp(opcode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glLogicOp\n", error);
    __debugbreak();
  }
}
#else
void glLogicOp(GLenum opcode);
#endif
#else
#define glLogicOp glad_glLogicOp
#endif
typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCPROC glad_glStencilFunc;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  glad_glStencilFunc(func, ref, mask);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glStencilFunc\n", error);
    __debugbreak();
  }
}
#else
void glStencilFunc(GLenum func, GLint ref, GLuint mask);
#endif
#else
#define glStencilFunc glad_glStencilFunc
#endif
typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI PFNGLSTENCILOPPROC glad_glStencilOp;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  glad_glStencilOp(fail, zfail, zpass);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glStencilOp\n", error);
    __debugbreak();
  }
}
#else
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
#endif
#else
#define glStencilOp glad_glStencilOp
#endif
typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
GLAPI PFNGLDEPTHFUNCPROC glad_glDepthFunc;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDepthFunc(GLenum func) {
  glad_glDepthFunc(func);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDepthFunc\n", error);
    __debugbreak();
  }
}
#else
void glDepthFunc(GLenum func);
#endif
#else
#define glDepthFunc glad_glDepthFunc
#endif
typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELSTOREFPROC glad_glPixelStoref;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPixelStoref(GLenum pname, GLfloat param) {
  glad_glPixelStoref(pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPixelStoref\n", error);
    __debugbreak();
  }
}
#else
void glPixelStoref(GLenum pname, GLfloat param);
#endif
#else
#define glPixelStoref glad_glPixelStoref
#endif
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELSTOREIPROC glad_glPixelStorei;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPixelStorei(GLenum pname, GLint param) {
  glad_glPixelStorei(pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPixelStorei\n", error);
    __debugbreak();
  }
}
#else
void glPixelStorei(GLenum pname, GLint param);
#endif
#else
#define glPixelStorei glad_glPixelStorei
#endif
typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
GLAPI PFNGLREADBUFFERPROC glad_glReadBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glReadBuffer(GLenum src) {
  glad_glReadBuffer(src);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glReadBuffer\n", error);
    __debugbreak();
  }
}
#else
void glReadBuffer(GLenum src);
#endif
#else
#define glReadBuffer glad_glReadBuffer
#endif
typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLAPI PFNGLREADPIXELSPROC glad_glReadPixels;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
  glad_glReadPixels(x, y, width, height, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glReadPixels\n", error);
    __debugbreak();
  }
}
#else
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
#endif
#else
#define glReadPixels glad_glReadPixels
#endif
typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
GLAPI PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetBooleanv(GLenum pname, GLboolean *data) {
  glad_glGetBooleanv(pname, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetBooleanv\n", error);
    __debugbreak();
  }
}
#else
void glGetBooleanv(GLenum pname, GLboolean *data);
#endif
#else
#define glGetBooleanv glad_glGetBooleanv
#endif
typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
GLAPI PFNGLGETDOUBLEVPROC glad_glGetDoublev;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetDoublev(GLenum pname, GLdouble *data) {
  glad_glGetDoublev(pname, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetDoublev\n", error);
    __debugbreak();
  }
}
#else
void glGetDoublev(GLenum pname, GLdouble *data);
#endif
#else
#define glGetDoublev glad_glGetDoublev
#endif
typedef GLenum (APIENTRYP PFNGLGETERRORPROC)(void);
GLAPI PFNGLGETERRORPROC glad_glGetError;
#define glGetError glad_glGetError
typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
GLAPI PFNGLGETFLOATVPROC glad_glGetFloatv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetFloatv(GLenum pname, GLfloat *data) {
  glad_glGetFloatv(pname, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetFloatv\n", error);
    __debugbreak();
  }
}
#else
void glGetFloatv(GLenum pname, GLfloat *data);
#endif
#else
#define glGetFloatv glad_glGetFloatv
#endif
typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
GLAPI PFNGLGETINTEGERVPROC glad_glGetIntegerv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetIntegerv(GLenum pname, GLint *data) {
  glad_glGetIntegerv(pname, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetIntegerv\n", error);
    __debugbreak();
  }
}
#else
void glGetIntegerv(GLenum pname, GLint *data);
#endif
#else
#define glGetIntegerv glad_glGetIntegerv
#endif
typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
GLAPI PFNGLGETSTRINGPROC glad_glGetString;
#define glGetString glad_glGetString
typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLAPI PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  glad_glGetTexImage(target, level, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexImage\n", error);
    __debugbreak();
  }
}
#else
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
#endif
#else
#define glGetTexImage glad_glGetTexImage
#endif
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  glad_glGetTexParameterfv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
#endif
#else
#define glGetTexParameterfv glad_glGetTexParameterfv
#endif
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
  glad_glGetTexParameteriv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
#endif
#else
#define glGetTexParameteriv glad_glGetTexParameteriv
#endif
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
  glad_glGetTexLevelParameterfv(target, level, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexLevelParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
#endif
#else
#define glGetTexLevelParameterfv glad_glGetTexLevelParameterfv
#endif
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
  glad_glGetTexLevelParameteriv(target, level, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexLevelParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
#endif
#else
#define glGetTexLevelParameteriv glad_glGetTexLevelParameteriv
#endif
typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
GLAPI PFNGLISENABLEDPROC glad_glIsEnabled;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsEnabled(GLenum cap) {
  GLboolean result = glad_glIsEnabled(cap);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsEnabled\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsEnabled(GLenum cap);
#endif
#else
#define glIsEnabled glad_glIsEnabled
#endif
typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEPROC glad_glDepthRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDepthRange(GLdouble n, GLdouble f) {
  glad_glDepthRange(n, f);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDepthRange\n", error);
    __debugbreak();
  }
}
#else
void glDepthRange(GLdouble n, GLdouble f);
#endif
#else
#define glDepthRange glad_glDepthRange
#endif
typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLVIEWPORTPROC glad_glViewport;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glViewport(x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glViewport\n", error);
    __debugbreak();
  }
}
#else
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glViewport glad_glViewport
#endif
#endif
#ifndef GL_VERSION_1_1
#define GL_VERSION_1_1 1
GLAPI int GLAD_GL_VERSION_1_1;
typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSPROC glad_glDrawArrays;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  glad_glDrawArrays(mode, first, count);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawArrays\n", error);
    __debugbreak();
  }
}
#else
void glDrawArrays(GLenum mode, GLint first, GLsizei count);
#endif
#else
#define glDrawArrays glad_glDrawArrays
#endif
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
GLAPI PFNGLDRAWELEMENTSPROC glad_glDrawElements;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices) {
  glad_glDrawElements(mode, count, type, indices);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElements\n", error);
    __debugbreak();
  }
}
#else
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
#endif
#else
#define glDrawElements glad_glDrawElements
#endif
typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPolygonOffset(GLfloat factor, GLfloat units) {
  glad_glPolygonOffset(factor, units);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPolygonOffset\n", error);
    __debugbreak();
  }
}
#else
void glPolygonOffset(GLfloat factor, GLfloat units);
#endif
#else
#define glPolygonOffset glad_glPolygonOffset
#endif
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  glad_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTexImage1D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
#endif
#else
#define glCopyTexImage1D glad_glCopyTexImage1D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  glad_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTexImage2D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
#endif
#else
#define glCopyTexImage2D glad_glCopyTexImage2D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  glad_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTexSubImage1D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
#endif
#else
#define glCopyTexSubImage1D glad_glCopyTexSubImage1D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTexSubImage2D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glCopyTexSubImage2D glad_glCopyTexSubImage2D
#endif
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  glad_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexSubImage1D\n", error);
    __debugbreak();
  }
}
#else
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTexSubImage1D glad_glTexSubImage1D
#endif
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  glad_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexSubImage2D\n", error);
    __debugbreak();
  }
}
#else
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTexSubImage2D glad_glTexSubImage2D
#endif
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
GLAPI PFNGLBINDTEXTUREPROC glad_glBindTexture;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindTexture(GLenum target, GLuint texture) {
  glad_glBindTexture(target, texture);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindTexture\n", error);
    __debugbreak();
  }
}
#else
void glBindTexture(GLenum target, GLuint texture);
#endif
#else
#define glBindTexture glad_glBindTexture
#endif
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
GLAPI PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteTextures(GLsizei n, const GLuint *textures) {
  glad_glDeleteTextures(n, textures);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteTextures\n", error);
    __debugbreak();
  }
}
#else
void glDeleteTextures(GLsizei n, const GLuint *textures);
#endif
#else
#define glDeleteTextures glad_glDeleteTextures
#endif
typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
GLAPI PFNGLGENTEXTURESPROC glad_glGenTextures;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenTextures(GLsizei n, GLuint *textures) {
  glad_glGenTextures(n, textures);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenTextures\n", error);
    __debugbreak();
  }
}
#else
void glGenTextures(GLsizei n, GLuint *textures);
#endif
#else
#define glGenTextures glad_glGenTextures
#endif
typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREPROC glad_glIsTexture;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsTexture(GLuint texture) {
  GLboolean result = glad_glIsTexture(texture);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsTexture\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsTexture(GLuint texture);
#endif
#else
#define glIsTexture glad_glIsTexture
#endif
#endif
#ifndef GL_VERSION_1_2
#define GL_VERSION_1_2 1
GLAPI int GLAD_GL_VERSION_1_2;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
  glad_glDrawRangeElements(mode, start, end, count, type, indices);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawRangeElements\n", error);
    __debugbreak();
  }
}
#else
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
#endif
#else
#define glDrawRangeElements glad_glDrawRangeElements
#endif
typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
  glad_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexImage3D\n", error);
    __debugbreak();
  }
}
#else
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTexImage3D glad_glTexImage3D
#endif
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  glad_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexSubImage3D\n", error);
    __debugbreak();
  }
}
#else
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTexSubImage3D glad_glTexSubImage3D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTexSubImage3D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glCopyTexSubImage3D glad_glCopyTexSubImage3D
#endif
#endif
#ifndef GL_VERSION_1_3
#define GL_VERSION_1_3 1
GLAPI int GLAD_GL_VERSION_1_3;
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
GLAPI PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glActiveTexture(GLenum texture) {
  glad_glActiveTexture(texture);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glActiveTexture\n", error);
    __debugbreak();
  }
}
#else
void glActiveTexture(GLenum texture);
#endif
#else
#define glActiveTexture glad_glActiveTexture
#endif
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSampleCoverage(GLfloat value, GLboolean invert) {
  glad_glSampleCoverage(value, invert);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSampleCoverage\n", error);
    __debugbreak();
  }
}
#else
void glSampleCoverage(GLfloat value, GLboolean invert);
#endif
#else
#define glSampleCoverage glad_glSampleCoverage
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
  glad_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTexImage3D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTexImage3D glad_glCompressedTexImage3D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
  glad_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTexImage2D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTexImage2D glad_glCompressedTexImage2D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
  glad_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTexImage1D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTexImage1D glad_glCompressedTexImage1D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
  glad_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTexSubImage3D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTexSubImage3D glad_glCompressedTexSubImage3D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
  glad_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTexSubImage2D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTexSubImage2D glad_glCompressedTexSubImage2D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
  glad_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTexSubImage1D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTexSubImage1D glad_glCompressedTexSubImage1D
#endif
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetCompressedTexImage(GLenum target, GLint level, void *img) {
  glad_glGetCompressedTexImage(target, level, img);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetCompressedTexImage\n", error);
    __debugbreak();
  }
}
#else
void glGetCompressedTexImage(GLenum target, GLint level, void *img);
#endif
#else
#define glGetCompressedTexImage glad_glGetCompressedTexImage
#endif
#endif
#ifndef GL_VERSION_1_4
#define GL_VERSION_1_4 1
GLAPI int GLAD_GL_VERSION_1_4;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  glad_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendFuncSeparate\n", error);
    __debugbreak();
  }
}
#else
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
#endif
#else
#define glBlendFuncSeparate glad_glBlendFuncSeparate
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {
  glad_glMultiDrawArrays(mode, first, count, drawcount);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawArrays\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
#endif
#else
#define glMultiDrawArrays glad_glMultiDrawArrays
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {
  glad_glMultiDrawElements(mode, count, type, indices, drawcount);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawElements\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
#endif
#else
#define glMultiDrawElements glad_glMultiDrawElements
#endif
typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPointParameterf(GLenum pname, GLfloat param) {
  glad_glPointParameterf(pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPointParameterf\n", error);
    __debugbreak();
  }
}
#else
void glPointParameterf(GLenum pname, GLfloat param);
#endif
#else
#define glPointParameterf glad_glPointParameterf
#endif
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
GLAPI PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPointParameterfv(GLenum pname, const GLfloat *params) {
  glad_glPointParameterfv(pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPointParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glPointParameterfv(GLenum pname, const GLfloat *params);
#endif
#else
#define glPointParameterfv glad_glPointParameterfv
#endif
typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPointParameteri(GLenum pname, GLint param) {
  glad_glPointParameteri(pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPointParameteri\n", error);
    __debugbreak();
  }
}
#else
void glPointParameteri(GLenum pname, GLint param);
#endif
#else
#define glPointParameteri glad_glPointParameteri
#endif
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
GLAPI PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPointParameteriv(GLenum pname, const GLint *params) {
  glad_glPointParameteriv(pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPointParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glPointParameteriv(GLenum pname, const GLint *params);
#endif
#else
#define glPointParameteriv glad_glPointParameteriv
#endif
typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLBLENDCOLORPROC glad_glBlendColor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  glad_glBlendColor(red, green, blue, alpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendColor\n", error);
    __debugbreak();
  }
}
#else
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#endif
#else
#define glBlendColor glad_glBlendColor
#endif
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
GLAPI PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendEquation(GLenum mode) {
  glad_glBlendEquation(mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendEquation\n", error);
    __debugbreak();
  }
}
#else
void glBlendEquation(GLenum mode);
#endif
#else
#define glBlendEquation glad_glBlendEquation
#endif
#endif
#ifndef GL_VERSION_1_5
#define GL_VERSION_1_5 1
GLAPI int GLAD_GL_VERSION_1_5;
typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLGENQUERIESPROC glad_glGenQueries;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenQueries(GLsizei n, GLuint *ids) {
  glad_glGenQueries(n, ids);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenQueries\n", error);
    __debugbreak();
  }
}
#else
void glGenQueries(GLsizei n, GLuint *ids);
#endif
#else
#define glGenQueries glad_glGenQueries
#endif
typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
GLAPI PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteQueries(GLsizei n, const GLuint *ids) {
  glad_glDeleteQueries(n, ids);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteQueries\n", error);
    __debugbreak();
  }
}
#else
void glDeleteQueries(GLsizei n, const GLuint *ids);
#endif
#else
#define glDeleteQueries glad_glDeleteQueries
#endif
typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);
GLAPI PFNGLISQUERYPROC glad_glIsQuery;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsQuery(GLuint id) {
  GLboolean result = glad_glIsQuery(id);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsQuery\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsQuery(GLuint id);
#endif
#else
#define glIsQuery glad_glIsQuery
#endif
typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
GLAPI PFNGLBEGINQUERYPROC glad_glBeginQuery;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBeginQuery(GLenum target, GLuint id) {
  glad_glBeginQuery(target, id);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBeginQuery\n", error);
    __debugbreak();
  }
}
#else
void glBeginQuery(GLenum target, GLuint id);
#endif
#else
#define glBeginQuery glad_glBeginQuery
#endif
typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);
GLAPI PFNGLENDQUERYPROC glad_glEndQuery;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEndQuery(GLenum target) {
  glad_glEndQuery(target);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEndQuery\n", error);
    __debugbreak();
  }
}
#else
void glEndQuery(GLenum target);
#endif
#else
#define glEndQuery glad_glEndQuery
#endif
typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETQUERYIVPROC glad_glGetQueryiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
  glad_glGetQueryiv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryiv\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryiv(GLenum target, GLenum pname, GLint *params);
#endif
#else
#define glGetQueryiv glad_glGetQueryiv
#endif
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
GLAPI PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
  glad_glGetQueryObjectiv(id, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryObjectiv\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
#endif
#else
#define glGetQueryObjectiv glad_glGetQueryObjectiv
#endif
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
  glad_glGetQueryObjectuiv(id, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryObjectuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
#endif
#else
#define glGetQueryObjectuiv glad_glGetQueryObjectuiv
#endif
typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
GLAPI PFNGLBINDBUFFERPROC glad_glBindBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindBuffer(GLenum target, GLuint buffer) {
  glad_glBindBuffer(target, buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindBuffer\n", error);
    __debugbreak();
  }
}
#else
void glBindBuffer(GLenum target, GLuint buffer);
#endif
#else
#define glBindBuffer glad_glBindBuffer
#endif
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
GLAPI PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteBuffers(GLsizei n, const GLuint *buffers) {
  glad_glDeleteBuffers(n, buffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteBuffers\n", error);
    __debugbreak();
  }
}
#else
void glDeleteBuffers(GLsizei n, const GLuint *buffers);
#endif
#else
#define glDeleteBuffers glad_glDeleteBuffers
#endif
typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
GLAPI PFNGLGENBUFFERSPROC glad_glGenBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenBuffers(GLsizei n, GLuint *buffers) {
  glad_glGenBuffers(n, buffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenBuffers\n", error);
    __debugbreak();
  }
}
#else
void glGenBuffers(GLsizei n, GLuint *buffers);
#endif
#else
#define glGenBuffers glad_glGenBuffers
#endif
typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);
GLAPI PFNGLISBUFFERPROC glad_glIsBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsBuffer(GLuint buffer) {
  GLboolean result = glad_glIsBuffer(buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsBuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsBuffer(GLuint buffer);
#endif
#else
#define glIsBuffer glad_glIsBuffer
#endif
typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GLAPI PFNGLBUFFERDATAPROC glad_glBufferData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
  glad_glBufferData(target, size, data, usage);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBufferData\n", error);
    __debugbreak();
  }
}
#else
void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
#endif
#else
#define glBufferData glad_glBufferData
#endif
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
  glad_glBufferSubData(target, offset, size, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
#endif
#else
#define glBufferSubData glad_glBufferSubData
#endif
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
GLAPI PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
  glad_glGetBufferSubData(target, offset, size, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
#endif
#else
#define glGetBufferSubData glad_glGetBufferSubData
#endif
typedef void * (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
GLAPI PFNGLMAPBUFFERPROC glad_glMapBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void * glMapBuffer(GLenum target, GLenum access) {
  void * result = glad_glMapBuffer(target, access);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMapBuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
void * glMapBuffer(GLenum target, GLenum access);
#endif
#else
#define glMapBuffer glad_glMapBuffer
#endif
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);
GLAPI PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glUnmapBuffer(GLenum target) {
  GLboolean result = glad_glUnmapBuffer(target);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUnmapBuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glUnmapBuffer(GLenum target);
#endif
#else
#define glUnmapBuffer glad_glUnmapBuffer
#endif
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  glad_glGetBufferParameteriv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetBufferParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
#endif
#else
#define glGetBufferParameteriv glad_glGetBufferParameteriv
#endif
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
GLAPI PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetBufferPointerv(GLenum target, GLenum pname, void **params) {
  glad_glGetBufferPointerv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetBufferPointerv\n", error);
    __debugbreak();
  }
}
#else
void glGetBufferPointerv(GLenum target, GLenum pname, void **params);
#endif
#else
#define glGetBufferPointerv glad_glGetBufferPointerv
#endif
#endif
#ifndef GL_VERSION_2_0
#define GL_VERSION_2_0 1
GLAPI int GLAD_GL_VERSION_2_0;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  glad_glBlendEquationSeparate(modeRGB, modeAlpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendEquationSeparate\n", error);
    __debugbreak();
  }
}
#else
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
#endif
#else
#define glBlendEquationSeparate glad_glBlendEquationSeparate
#endif
typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
GLAPI PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawBuffers(GLsizei n, const GLenum *bufs) {
  glad_glDrawBuffers(n, bufs);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawBuffers\n", error);
    __debugbreak();
  }
}
#else
void glDrawBuffers(GLsizei n, const GLenum *bufs);
#endif
#else
#define glDrawBuffers glad_glDrawBuffers
#endif
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  glad_glStencilOpSeparate(face, sfail, dpfail, dppass);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glStencilOpSeparate\n", error);
    __debugbreak();
  }
}
#else
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
#endif
#else
#define glStencilOpSeparate glad_glStencilOpSeparate
#endif
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  glad_glStencilFuncSeparate(face, func, ref, mask);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glStencilFuncSeparate\n", error);
    __debugbreak();
  }
}
#else
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
#endif
#else
#define glStencilFuncSeparate glad_glStencilFuncSeparate
#endif
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glStencilMaskSeparate(GLenum face, GLuint mask) {
  glad_glStencilMaskSeparate(face, mask);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glStencilMaskSeparate\n", error);
    __debugbreak();
  }
}
#else
void glStencilMaskSeparate(GLenum face, GLuint mask);
#endif
#else
#define glStencilMaskSeparate glad_glStencilMaskSeparate
#endif
typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLATTACHSHADERPROC glad_glAttachShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glAttachShader(GLuint program, GLuint shader) {
  glad_glAttachShader(program, shader);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glAttachShader\n", error);
    __debugbreak();
  }
}
#else
void glAttachShader(GLuint program, GLuint shader);
#endif
#else
#define glAttachShader glad_glAttachShader
#endif
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
  glad_glBindAttribLocation(program, index, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindAttribLocation\n", error);
    __debugbreak();
  }
}
#else
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
#endif
#else
#define glBindAttribLocation glad_glBindAttribLocation
#endif
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
GLAPI PFNGLCOMPILESHADERPROC glad_glCompileShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompileShader(GLuint shader) {
  glad_glCompileShader(shader);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompileShader\n", error);
    __debugbreak();
  }
}
#else
void glCompileShader(GLuint shader);
#endif
#else
#define glCompileShader glad_glCompileShader
#endif
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)(void);
GLAPI PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glCreateProgram(void) {
  GLuint result = glad_glCreateProgram();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateProgram\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glCreateProgram(void);
#endif
#else
#define glCreateProgram glad_glCreateProgram
#endif
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
GLAPI PFNGLCREATESHADERPROC glad_glCreateShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glCreateShader(GLenum type) {
  GLuint result = glad_glCreateShader(type);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateShader\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glCreateShader(GLenum type);
#endif
#else
#define glCreateShader glad_glCreateShader
#endif
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
GLAPI PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteProgram(GLuint program) {
  glad_glDeleteProgram(program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteProgram\n", error);
    __debugbreak();
  }
}
#else
void glDeleteProgram(GLuint program);
#endif
#else
#define glDeleteProgram glad_glDeleteProgram
#endif
typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
GLAPI PFNGLDELETESHADERPROC glad_glDeleteShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteShader(GLuint shader) {
  glad_glDeleteShader(shader);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteShader\n", error);
    __debugbreak();
  }
}
#else
void glDeleteShader(GLuint shader);
#endif
#else
#define glDeleteShader glad_glDeleteShader
#endif
typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLDETACHSHADERPROC glad_glDetachShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDetachShader(GLuint program, GLuint shader) {
  glad_glDetachShader(program, shader);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDetachShader\n", error);
    __debugbreak();
  }
}
#else
void glDetachShader(GLuint program, GLuint shader);
#endif
#else
#define glDetachShader glad_glDetachShader
#endif
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDisableVertexAttribArray(GLuint index) {
  glad_glDisableVertexAttribArray(index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDisableVertexAttribArray\n", error);
    __debugbreak();
  }
}
#else
void glDisableVertexAttribArray(GLuint index);
#endif
#else
#define glDisableVertexAttribArray glad_glDisableVertexAttribArray
#endif
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEnableVertexAttribArray(GLuint index) {
  glad_glEnableVertexAttribArray(index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEnableVertexAttribArray\n", error);
    __debugbreak();
  }
}
#else
void glEnableVertexAttribArray(GLuint index);
#endif
#else
#define glEnableVertexAttribArray glad_glEnableVertexAttribArray
#endif
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  glad_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveAttrib\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
#endif
#else
#define glGetActiveAttrib glad_glGetActiveAttrib
#endif
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  glad_glGetActiveUniform(program, index, bufSize, length, size, type, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveUniform\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
#endif
#else
#define glGetActiveUniform glad_glGetActiveUniform
#endif
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLAPI PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
  glad_glGetAttachedShaders(program, maxCount, count, shaders);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetAttachedShaders\n", error);
    __debugbreak();
  }
}
#else
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
#endif
#else
#define glGetAttachedShaders glad_glGetAttachedShaders
#endif
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetAttribLocation(GLuint program, const GLchar *name) {
  GLint result = glad_glGetAttribLocation(program, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetAttribLocation\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetAttribLocation(GLuint program, const GLchar *name);
#endif
#else
#define glGetAttribLocation glad_glGetAttribLocation
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
GLAPI PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
  glad_glGetProgramiv(program, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramiv\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
#endif
#else
#define glGetProgramiv glad_glGetProgramiv
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  glad_glGetProgramInfoLog(program, bufSize, length, infoLog);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramInfoLog\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
#endif
#else
#define glGetProgramInfoLog glad_glGetProgramInfoLog
#endif
typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
GLAPI PFNGLGETSHADERIVPROC glad_glGetShaderiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
  glad_glGetShaderiv(shader, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetShaderiv\n", error);
    __debugbreak();
  }
}
#else
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
#endif
#else
#define glGetShaderiv glad_glGetShaderiv
#endif
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  glad_glGetShaderInfoLog(shader, bufSize, length, infoLog);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetShaderInfoLog\n", error);
    __debugbreak();
  }
}
#else
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
#endif
#else
#define glGetShaderInfoLog glad_glGetShaderInfoLog
#endif
typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLAPI PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
  glad_glGetShaderSource(shader, bufSize, length, source);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetShaderSource\n", error);
    __debugbreak();
  }
}
#else
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
#endif
#else
#define glGetShaderSource glad_glGetShaderSource
#endif
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetUniformLocation(GLuint program, const GLchar *name) {
  GLint result = glad_glGetUniformLocation(program, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformLocation\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetUniformLocation(GLuint program, const GLchar *name);
#endif
#else
#define glGetUniformLocation glad_glGetUniformLocation
#endif
typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
GLAPI PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
  glad_glGetUniformfv(program, location, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformfv\n", error);
    __debugbreak();
  }
}
#else
void glGetUniformfv(GLuint program, GLint location, GLfloat *params);
#endif
#else
#define glGetUniformfv glad_glGetUniformfv
#endif
typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
GLAPI PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetUniformiv(GLuint program, GLint location, GLint *params) {
  glad_glGetUniformiv(program, location, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformiv\n", error);
    __debugbreak();
  }
}
#else
void glGetUniformiv(GLuint program, GLint location, GLint *params);
#endif
#else
#define glGetUniformiv glad_glGetUniformiv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
  glad_glGetVertexAttribdv(index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribdv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
#endif
#else
#define glGetVertexAttribdv glad_glGetVertexAttribdv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
  glad_glGetVertexAttribfv(index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribfv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
#endif
#else
#define glGetVertexAttribfv glad_glGetVertexAttribfv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
  glad_glGetVertexAttribiv(index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribiv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
#endif
#else
#define glGetVertexAttribiv glad_glGetVertexAttribiv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {
  glad_glGetVertexAttribPointerv(index, pname, pointer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribPointerv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
#endif
#else
#define glGetVertexAttribPointerv glad_glGetVertexAttribPointerv
#endif
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
GLAPI PFNGLISPROGRAMPROC glad_glIsProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsProgram(GLuint program) {
  GLboolean result = glad_glIsProgram(program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsProgram\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsProgram(GLuint program);
#endif
#else
#define glIsProgram glad_glIsProgram
#endif
typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
GLAPI PFNGLISSHADERPROC glad_glIsShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsShader(GLuint shader) {
  GLboolean result = glad_glIsShader(shader);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsShader\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsShader(GLuint shader);
#endif
#else
#define glIsShader glad_glIsShader
#endif
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
GLAPI PFNGLLINKPROGRAMPROC glad_glLinkProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glLinkProgram(GLuint program) {
  glad_glLinkProgram(program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glLinkProgram\n", error);
    __debugbreak();
  }
}
#else
void glLinkProgram(GLuint program);
#endif
#else
#define glLinkProgram glad_glLinkProgram
#endif
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
GLAPI PFNGLSHADERSOURCEPROC glad_glShaderSource;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {
  glad_glShaderSource(shader, count, string, length);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glShaderSource\n", error);
    __debugbreak();
  }
}
#else
void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
#endif
#else
#define glShaderSource glad_glShaderSource
#endif
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
GLAPI PFNGLUSEPROGRAMPROC glad_glUseProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUseProgram(GLuint program) {
  glad_glUseProgram(program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUseProgram\n", error);
    __debugbreak();
  }
}
#else
void glUseProgram(GLuint program);
#endif
#else
#define glUseProgram glad_glUseProgram
#endif
typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
GLAPI PFNGLUNIFORM1FPROC glad_glUniform1f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1f(GLint location, GLfloat v0) {
  glad_glUniform1f(location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1f\n", error);
    __debugbreak();
  }
}
#else
void glUniform1f(GLint location, GLfloat v0);
#endif
#else
#define glUniform1f glad_glUniform1f
#endif
typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLUNIFORM2FPROC glad_glUniform2f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  glad_glUniform2f(location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2f\n", error);
    __debugbreak();
  }
}
#else
void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
#endif
#else
#define glUniform2f glad_glUniform2f
#endif
typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLUNIFORM3FPROC glad_glUniform3f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  glad_glUniform3f(location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3f\n", error);
    __debugbreak();
  }
}
#else
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
#endif
#else
#define glUniform3f glad_glUniform3f
#endif
typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLUNIFORM4FPROC glad_glUniform4f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  glad_glUniform4f(location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4f\n", error);
    __debugbreak();
  }
}
#else
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
#endif
#else
#define glUniform4f glad_glUniform4f
#endif
typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
GLAPI PFNGLUNIFORM1IPROC glad_glUniform1i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1i(GLint location, GLint v0) {
  glad_glUniform1i(location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1i\n", error);
    __debugbreak();
  }
}
#else
void glUniform1i(GLint location, GLint v0);
#endif
#else
#define glUniform1i glad_glUniform1i
#endif
typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
GLAPI PFNGLUNIFORM2IPROC glad_glUniform2i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2i(GLint location, GLint v0, GLint v1) {
  glad_glUniform2i(location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2i\n", error);
    __debugbreak();
  }
}
#else
void glUniform2i(GLint location, GLint v0, GLint v1);
#endif
#else
#define glUniform2i glad_glUniform2i
#endif
typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLUNIFORM3IPROC glad_glUniform3i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  glad_glUniform3i(location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3i\n", error);
    __debugbreak();
  }
}
#else
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
#endif
#else
#define glUniform3i glad_glUniform3i
#endif
typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLUNIFORM4IPROC glad_glUniform4i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  glad_glUniform4i(location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4i\n", error);
    __debugbreak();
  }
}
#else
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
#endif
#else
#define glUniform4i glad_glUniform4i
#endif
typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM1FVPROC glad_glUniform1fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
  glad_glUniform1fv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1fv\n", error);
    __debugbreak();
  }
}
#else
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glUniform1fv glad_glUniform1fv
#endif
typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM2FVPROC glad_glUniform2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
  glad_glUniform2fv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2fv\n", error);
    __debugbreak();
  }
}
#else
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glUniform2fv glad_glUniform2fv
#endif
typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM3FVPROC glad_glUniform3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
  glad_glUniform3fv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3fv\n", error);
    __debugbreak();
  }
}
#else
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glUniform3fv glad_glUniform3fv
#endif
typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM4FVPROC glad_glUniform4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
  glad_glUniform4fv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4fv\n", error);
    __debugbreak();
  }
}
#else
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glUniform4fv glad_glUniform4fv
#endif
typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM1IVPROC glad_glUniform1iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1iv(GLint location, GLsizei count, const GLint *value) {
  glad_glUniform1iv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1iv\n", error);
    __debugbreak();
  }
}
#else
void glUniform1iv(GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glUniform1iv glad_glUniform1iv
#endif
typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM2IVPROC glad_glUniform2iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2iv(GLint location, GLsizei count, const GLint *value) {
  glad_glUniform2iv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2iv\n", error);
    __debugbreak();
  }
}
#else
void glUniform2iv(GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glUniform2iv glad_glUniform2iv
#endif
typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM3IVPROC glad_glUniform3iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3iv(GLint location, GLsizei count, const GLint *value) {
  glad_glUniform3iv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3iv\n", error);
    __debugbreak();
  }
}
#else
void glUniform3iv(GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glUniform3iv glad_glUniform3iv
#endif
typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM4IVPROC glad_glUniform4iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4iv(GLint location, GLsizei count, const GLint *value) {
  glad_glUniform4iv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4iv\n", error);
    __debugbreak();
  }
}
#else
void glUniform4iv(GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glUniform4iv glad_glUniform4iv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix2fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix2fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix2fv glad_glUniformMatrix2fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix3fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix3fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix3fv glad_glUniformMatrix3fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix4fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix4fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix4fv glad_glUniformMatrix4fv
#endif
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
GLAPI PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glValidateProgram(GLuint program) {
  glad_glValidateProgram(program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glValidateProgram\n", error);
    __debugbreak();
  }
}
#else
void glValidateProgram(GLuint program);
#endif
#else
#define glValidateProgram glad_glValidateProgram
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib1d(GLuint index, GLdouble x) {
  glad_glVertexAttrib1d(index, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib1d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib1d(GLuint index, GLdouble x);
#endif
#else
#define glVertexAttrib1d glad_glVertexAttrib1d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib1dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttrib1dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib1dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib1dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttrib1dv glad_glVertexAttrib1dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib1f(GLuint index, GLfloat x) {
  glad_glVertexAttrib1f(index, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib1f\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib1f(GLuint index, GLfloat x);
#endif
#else
#define glVertexAttrib1f glad_glVertexAttrib1f
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib1fv(GLuint index, const GLfloat *v) {
  glad_glVertexAttrib1fv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib1fv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib1fv(GLuint index, const GLfloat *v);
#endif
#else
#define glVertexAttrib1fv glad_glVertexAttrib1fv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib1s(GLuint index, GLshort x) {
  glad_glVertexAttrib1s(index, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib1s\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib1s(GLuint index, GLshort x);
#endif
#else
#define glVertexAttrib1s glad_glVertexAttrib1s
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib1sv(GLuint index, const GLshort *v) {
  glad_glVertexAttrib1sv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib1sv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib1sv(GLuint index, const GLshort *v);
#endif
#else
#define glVertexAttrib1sv glad_glVertexAttrib1sv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  glad_glVertexAttrib2d(index, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib2d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
#endif
#else
#define glVertexAttrib2d glad_glVertexAttrib2d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib2dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttrib2dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib2dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib2dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttrib2dv glad_glVertexAttrib2dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  glad_glVertexAttrib2f(index, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib2f\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
#endif
#else
#define glVertexAttrib2f glad_glVertexAttrib2f
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib2fv(GLuint index, const GLfloat *v) {
  glad_glVertexAttrib2fv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib2fv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib2fv(GLuint index, const GLfloat *v);
#endif
#else
#define glVertexAttrib2fv glad_glVertexAttrib2fv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  glad_glVertexAttrib2s(index, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib2s\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
#endif
#else
#define glVertexAttrib2s glad_glVertexAttrib2s
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib2sv(GLuint index, const GLshort *v) {
  glad_glVertexAttrib2sv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib2sv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib2sv(GLuint index, const GLshort *v);
#endif
#else
#define glVertexAttrib2sv glad_glVertexAttrib2sv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  glad_glVertexAttrib3d(index, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib3d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
#endif
#else
#define glVertexAttrib3d glad_glVertexAttrib3d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib3dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttrib3dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib3dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib3dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttrib3dv glad_glVertexAttrib3dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  glad_glVertexAttrib3f(index, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib3f\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
#endif
#else
#define glVertexAttrib3f glad_glVertexAttrib3f
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib3fv(GLuint index, const GLfloat *v) {
  glad_glVertexAttrib3fv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib3fv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib3fv(GLuint index, const GLfloat *v);
#endif
#else
#define glVertexAttrib3fv glad_glVertexAttrib3fv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  glad_glVertexAttrib3s(index, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib3s\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
#endif
#else
#define glVertexAttrib3s glad_glVertexAttrib3s
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib3sv(GLuint index, const GLshort *v) {
  glad_glVertexAttrib3sv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib3sv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib3sv(GLuint index, const GLshort *v);
#endif
#else
#define glVertexAttrib3sv glad_glVertexAttrib3sv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
  glad_glVertexAttrib4Nbv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Nbv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
#endif
#else
#define glVertexAttrib4Nbv glad_glVertexAttrib4Nbv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Niv(GLuint index, const GLint *v) {
  glad_glVertexAttrib4Niv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Niv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Niv(GLuint index, const GLint *v);
#endif
#else
#define glVertexAttrib4Niv glad_glVertexAttrib4Niv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
  glad_glVertexAttrib4Nsv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Nsv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Nsv(GLuint index, const GLshort *v);
#endif
#else
#define glVertexAttrib4Nsv glad_glVertexAttrib4Nsv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  glad_glVertexAttrib4Nub(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Nub\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
#endif
#else
#define glVertexAttrib4Nub glad_glVertexAttrib4Nub
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
  glad_glVertexAttrib4Nubv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Nubv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
#endif
#else
#define glVertexAttrib4Nubv glad_glVertexAttrib4Nubv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
  glad_glVertexAttrib4Nuiv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Nuiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
#endif
#else
#define glVertexAttrib4Nuiv glad_glVertexAttrib4Nuiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
  glad_glVertexAttrib4Nusv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4Nusv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4Nusv(GLuint index, const GLushort *v);
#endif
#else
#define glVertexAttrib4Nusv glad_glVertexAttrib4Nusv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4bv(GLuint index, const GLbyte *v) {
  glad_glVertexAttrib4bv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4bv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4bv(GLuint index, const GLbyte *v);
#endif
#else
#define glVertexAttrib4bv glad_glVertexAttrib4bv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glad_glVertexAttrib4d(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#endif
#else
#define glVertexAttrib4d glad_glVertexAttrib4d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttrib4dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttrib4dv glad_glVertexAttrib4dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  glad_glVertexAttrib4f(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4f\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#endif
#else
#define glVertexAttrib4f glad_glVertexAttrib4f
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4fv(GLuint index, const GLfloat *v) {
  glad_glVertexAttrib4fv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4fv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4fv(GLuint index, const GLfloat *v);
#endif
#else
#define glVertexAttrib4fv glad_glVertexAttrib4fv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4iv(GLuint index, const GLint *v) {
  glad_glVertexAttrib4iv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4iv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4iv(GLuint index, const GLint *v);
#endif
#else
#define glVertexAttrib4iv glad_glVertexAttrib4iv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  glad_glVertexAttrib4s(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4s\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
#endif
#else
#define glVertexAttrib4s glad_glVertexAttrib4s
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4sv(GLuint index, const GLshort *v) {
  glad_glVertexAttrib4sv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4sv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4sv(GLuint index, const GLshort *v);
#endif
#else
#define glVertexAttrib4sv glad_glVertexAttrib4sv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
  glad_glVertexAttrib4ubv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4ubv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4ubv(GLuint index, const GLubyte *v);
#endif
#else
#define glVertexAttrib4ubv glad_glVertexAttrib4ubv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4uiv(GLuint index, const GLuint *v) {
  glad_glVertexAttrib4uiv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4uiv(GLuint index, const GLuint *v);
#endif
#else
#define glVertexAttrib4uiv glad_glVertexAttrib4uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttrib4usv(GLuint index, const GLushort *v) {
  glad_glVertexAttrib4usv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttrib4usv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttrib4usv(GLuint index, const GLushort *v);
#endif
#else
#define glVertexAttrib4usv glad_glVertexAttrib4usv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
  glad_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribPointer\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
#endif
#else
#define glVertexAttribPointer glad_glVertexAttribPointer
#endif
#endif
#ifndef GL_VERSION_2_1
#define GL_VERSION_2_1 1
GLAPI int GLAD_GL_VERSION_2_1;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix2x3fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix2x3fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix2x3fv glad_glUniformMatrix2x3fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix3x2fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix3x2fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix3x2fv glad_glUniformMatrix3x2fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix2x4fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix2x4fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix2x4fv glad_glUniformMatrix2x4fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix4x2fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix4x2fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix4x2fv glad_glUniformMatrix4x2fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix3x4fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix3x4fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix3x4fv glad_glUniformMatrix3x4fv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glUniformMatrix4x3fv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix4x3fv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glUniformMatrix4x3fv glad_glUniformMatrix4x3fv
#endif
#endif
#ifndef GL_VERSION_3_0
#define GL_VERSION_3_0 1
GLAPI int GLAD_GL_VERSION_3_0;
typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI PFNGLCOLORMASKIPROC glad_glColorMaski;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  glad_glColorMaski(index, r, g, b, a);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glColorMaski\n", error);
    __debugbreak();
  }
}
#else
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
#endif
#else
#define glColorMaski glad_glColorMaski
#endif
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
GLAPI PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {
  glad_glGetBooleani_v(target, index, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetBooleani_v\n", error);
    __debugbreak();
  }
}
#else
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
#endif
#else
#define glGetBooleani_v glad_glGetBooleani_v
#endif
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
GLAPI PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {
  glad_glGetIntegeri_v(target, index, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetIntegeri_v\n", error);
    __debugbreak();
  }
}
#else
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
#endif
#else
#define glGetIntegeri_v glad_glGetIntegeri_v
#endif
typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLENABLEIPROC glad_glEnablei;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEnablei(GLenum target, GLuint index) {
  glad_glEnablei(target, index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEnablei\n", error);
    __debugbreak();
  }
}
#else
void glEnablei(GLenum target, GLuint index);
#endif
#else
#define glEnablei glad_glEnablei
#endif
typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLDISABLEIPROC glad_glDisablei;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDisablei(GLenum target, GLuint index) {
  glad_glDisablei(target, index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDisablei\n", error);
    __debugbreak();
  }
}
#else
void glDisablei(GLenum target, GLuint index);
#endif
#else
#define glDisablei glad_glDisablei
#endif
typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
GLAPI PFNGLISENABLEDIPROC glad_glIsEnabledi;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsEnabledi(GLenum target, GLuint index) {
  GLboolean result = glad_glIsEnabledi(target, index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsEnabledi\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsEnabledi(GLenum target, GLuint index);
#endif
#else
#define glIsEnabledi glad_glIsEnabledi
#endif
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBeginTransformFeedback(GLenum primitiveMode) {
  glad_glBeginTransformFeedback(primitiveMode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBeginTransformFeedback\n", error);
    __debugbreak();
  }
}
#else
void glBeginTransformFeedback(GLenum primitiveMode);
#endif
#else
#define glBeginTransformFeedback glad_glBeginTransformFeedback
#endif
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEndTransformFeedback(void) {
  glad_glEndTransformFeedback();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEndTransformFeedback\n", error);
    __debugbreak();
  }
}
#else
void glEndTransformFeedback(void);
#endif
#else
#define glEndTransformFeedback glad_glEndTransformFeedback
#endif
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  glad_glBindBufferRange(target, index, buffer, offset, size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindBufferRange\n", error);
    __debugbreak();
  }
}
#else
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif
#else
#define glBindBufferRange glad_glBindBufferRange
#endif
typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  glad_glBindBufferBase(target, index, buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindBufferBase\n", error);
    __debugbreak();
  }
}
#else
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
#endif
#else
#define glBindBufferBase glad_glBindBufferBase
#endif
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
  glad_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTransformFeedbackVaryings\n", error);
    __debugbreak();
  }
}
#else
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
#endif
#else
#define glTransformFeedbackVaryings glad_glTransformFeedbackVaryings
#endif
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  glad_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTransformFeedbackVarying\n", error);
    __debugbreak();
  }
}
#else
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
#endif
#else
#define glGetTransformFeedbackVarying glad_glGetTransformFeedbackVarying
#endif
typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
GLAPI PFNGLCLAMPCOLORPROC glad_glClampColor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClampColor(GLenum target, GLenum clamp) {
  glad_glClampColor(target, clamp);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClampColor\n", error);
    __debugbreak();
  }
}
#else
void glClampColor(GLenum target, GLenum clamp);
#endif
#else
#define glClampColor glad_glClampColor
#endif
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBeginConditionalRender(GLuint id, GLenum mode) {
  glad_glBeginConditionalRender(id, mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBeginConditionalRender\n", error);
    __debugbreak();
  }
}
#else
void glBeginConditionalRender(GLuint id, GLenum mode);
#endif
#else
#define glBeginConditionalRender glad_glBeginConditionalRender
#endif
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)(void);
GLAPI PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEndConditionalRender(void) {
  glad_glEndConditionalRender();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEndConditionalRender\n", error);
    __debugbreak();
  }
}
#else
void glEndConditionalRender(void);
#endif
#else
#define glEndConditionalRender glad_glEndConditionalRender
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glad_glVertexAttribIPointer(index, size, type, stride, pointer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribIPointer\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
#endif
#else
#define glVertexAttribIPointer glad_glVertexAttribIPointer
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {
  glad_glGetVertexAttribIiv(index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribIiv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
#endif
#else
#define glGetVertexAttribIiv glad_glGetVertexAttribIiv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {
  glad_glGetVertexAttribIuiv(index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribIuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
#endif
#else
#define glGetVertexAttribIuiv glad_glGetVertexAttribIuiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
GLAPI PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI1i(GLuint index, GLint x) {
  glad_glVertexAttribI1i(index, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI1i\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI1i(GLuint index, GLint x);
#endif
#else
#define glVertexAttribI1i glad_glVertexAttribI1i
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
GLAPI PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI2i(GLuint index, GLint x, GLint y) {
  glad_glVertexAttribI2i(index, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI2i\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI2i(GLuint index, GLint x, GLint y);
#endif
#else
#define glVertexAttribI2i glad_glVertexAttribI2i
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
  glad_glVertexAttribI3i(index, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI3i\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
#endif
#else
#define glVertexAttribI3i glad_glVertexAttribI3i
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  glad_glVertexAttribI4i(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4i\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
#endif
#else
#define glVertexAttribI4i glad_glVertexAttribI4i
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI1ui(GLuint index, GLuint x) {
  glad_glVertexAttribI1ui(index, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI1ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI1ui(GLuint index, GLuint x);
#endif
#else
#define glVertexAttribI1ui glad_glVertexAttribI1ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
  glad_glVertexAttribI2ui(index, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI2ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
#endif
#else
#define glVertexAttribI2ui glad_glVertexAttribI2ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
  glad_glVertexAttribI3ui(index, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI3ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
#endif
#else
#define glVertexAttribI3ui glad_glVertexAttribI3ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  glad_glVertexAttribI4ui(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
#endif
#else
#define glVertexAttribI4ui glad_glVertexAttribI4ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI1iv(GLuint index, const GLint *v) {
  glad_glVertexAttribI1iv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI1iv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI1iv(GLuint index, const GLint *v);
#endif
#else
#define glVertexAttribI1iv glad_glVertexAttribI1iv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI2iv(GLuint index, const GLint *v) {
  glad_glVertexAttribI2iv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI2iv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI2iv(GLuint index, const GLint *v);
#endif
#else
#define glVertexAttribI2iv glad_glVertexAttribI2iv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI3iv(GLuint index, const GLint *v) {
  glad_glVertexAttribI3iv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI3iv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI3iv(GLuint index, const GLint *v);
#endif
#else
#define glVertexAttribI3iv glad_glVertexAttribI3iv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4iv(GLuint index, const GLint *v) {
  glad_glVertexAttribI4iv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4iv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4iv(GLuint index, const GLint *v);
#endif
#else
#define glVertexAttribI4iv glad_glVertexAttribI4iv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI1uiv(GLuint index, const GLuint *v) {
  glad_glVertexAttribI1uiv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI1uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI1uiv(GLuint index, const GLuint *v);
#endif
#else
#define glVertexAttribI1uiv glad_glVertexAttribI1uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI2uiv(GLuint index, const GLuint *v) {
  glad_glVertexAttribI2uiv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI2uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI2uiv(GLuint index, const GLuint *v);
#endif
#else
#define glVertexAttribI2uiv glad_glVertexAttribI2uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI3uiv(GLuint index, const GLuint *v) {
  glad_glVertexAttribI3uiv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI3uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI3uiv(GLuint index, const GLuint *v);
#endif
#else
#define glVertexAttribI3uiv glad_glVertexAttribI3uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4uiv(GLuint index, const GLuint *v) {
  glad_glVertexAttribI4uiv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4uiv(GLuint index, const GLuint *v);
#endif
#else
#define glVertexAttribI4uiv glad_glVertexAttribI4uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4bv(GLuint index, const GLbyte *v) {
  glad_glVertexAttribI4bv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4bv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4bv(GLuint index, const GLbyte *v);
#endif
#else
#define glVertexAttribI4bv glad_glVertexAttribI4bv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4sv(GLuint index, const GLshort *v) {
  glad_glVertexAttribI4sv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4sv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4sv(GLuint index, const GLshort *v);
#endif
#else
#define glVertexAttribI4sv glad_glVertexAttribI4sv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4ubv(GLuint index, const GLubyte *v) {
  glad_glVertexAttribI4ubv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4ubv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4ubv(GLuint index, const GLubyte *v);
#endif
#else
#define glVertexAttribI4ubv glad_glVertexAttribI4ubv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribI4usv(GLuint index, const GLushort *v) {
  glad_glVertexAttribI4usv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribI4usv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribI4usv(GLuint index, const GLushort *v);
#endif
#else
#define glVertexAttribI4usv glad_glVertexAttribI4usv
#endif
typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
GLAPI PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetUniformuiv(GLuint program, GLint location, GLuint *params) {
  glad_glGetUniformuiv(program, location, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetUniformuiv(GLuint program, GLint location, GLuint *params);
#endif
#else
#define glGetUniformuiv glad_glGetUniformuiv
#endif
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {
  glad_glBindFragDataLocation(program, color, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindFragDataLocation\n", error);
    __debugbreak();
  }
}
#else
void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
#endif
#else
#define glBindFragDataLocation glad_glBindFragDataLocation
#endif
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetFragDataLocation(GLuint program, const GLchar *name) {
  GLint result = glad_glGetFragDataLocation(program, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetFragDataLocation\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetFragDataLocation(GLuint program, const GLchar *name);
#endif
#else
#define glGetFragDataLocation glad_glGetFragDataLocation
#endif
typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
GLAPI PFNGLUNIFORM1UIPROC glad_glUniform1ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1ui(GLint location, GLuint v0) {
  glad_glUniform1ui(location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1ui\n", error);
    __debugbreak();
  }
}
#else
void glUniform1ui(GLint location, GLuint v0);
#endif
#else
#define glUniform1ui glad_glUniform1ui
#endif
typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLUNIFORM2UIPROC glad_glUniform2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  glad_glUniform2ui(location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2ui\n", error);
    __debugbreak();
  }
}
#else
void glUniform2ui(GLint location, GLuint v0, GLuint v1);
#endif
#else
#define glUniform2ui glad_glUniform2ui
#endif
typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLUNIFORM3UIPROC glad_glUniform3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  glad_glUniform3ui(location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3ui\n", error);
    __debugbreak();
  }
}
#else
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
#endif
#else
#define glUniform3ui glad_glUniform3ui
#endif
typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLUNIFORM4UIPROC glad_glUniform4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  glad_glUniform4ui(location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4ui\n", error);
    __debugbreak();
  }
}
#else
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
#endif
#else
#define glUniform4ui glad_glUniform4ui
#endif
typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {
  glad_glUniform1uiv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1uiv\n", error);
    __debugbreak();
  }
}
#else
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glUniform1uiv glad_glUniform1uiv
#endif
typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {
  glad_glUniform2uiv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2uiv\n", error);
    __debugbreak();
  }
}
#else
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glUniform2uiv glad_glUniform2uiv
#endif
typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {
  glad_glUniform3uiv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3uiv\n", error);
    __debugbreak();
  }
}
#else
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glUniform3uiv glad_glUniform3uiv
#endif
typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {
  glad_glUniform4uiv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4uiv\n", error);
    __debugbreak();
  }
}
#else
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glUniform4uiv glad_glUniform4uiv
#endif
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLAPI PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {
  glad_glTexParameterIiv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexParameterIiv\n", error);
    __debugbreak();
  }
}
#else
void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
#endif
#else
#define glTexParameterIiv glad_glTexParameterIiv
#endif
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
GLAPI PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {
  glad_glTexParameterIuiv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexParameterIuiv\n", error);
    __debugbreak();
  }
}
#else
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
#endif
#else
#define glTexParameterIuiv glad_glTexParameterIuiv
#endif
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {
  glad_glGetTexParameterIiv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexParameterIiv\n", error);
    __debugbreak();
  }
}
#else
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
#endif
#else
#define glGetTexParameterIiv glad_glGetTexParameterIiv
#endif
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {
  glad_glGetTexParameterIuiv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTexParameterIuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
#endif
#else
#define glGetTexParameterIuiv glad_glGetTexParameterIuiv
#endif
typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {
  glad_glClearBufferiv(buffer, drawbuffer, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearBufferiv\n", error);
    __debugbreak();
  }
}
#else
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
#endif
#else
#define glClearBufferiv glad_glClearBufferiv
#endif
typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
GLAPI PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {
  glad_glClearBufferuiv(buffer, drawbuffer, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearBufferuiv\n", error);
    __debugbreak();
  }
}
#else
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
#endif
#else
#define glClearBufferuiv glad_glClearBufferuiv
#endif
typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
  glad_glClearBufferfv(buffer, drawbuffer, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearBufferfv\n", error);
    __debugbreak();
  }
}
#else
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
#endif
#else
#define glClearBufferfv glad_glClearBufferfv
#endif
typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  glad_glClearBufferfi(buffer, drawbuffer, depth, stencil);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearBufferfi\n", error);
    __debugbreak();
  }
}
#else
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
#endif
#else
#define glClearBufferfi glad_glClearBufferfi
#endif
typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
GLAPI PFNGLGETSTRINGIPROC glad_glGetStringi;
#define glGetStringi glad_glGetStringi
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
GLAPI PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsRenderbuffer(GLuint renderbuffer) {
  GLboolean result = glad_glIsRenderbuffer(renderbuffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsRenderbuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsRenderbuffer(GLuint renderbuffer);
#endif
#else
#define glIsRenderbuffer glad_glIsRenderbuffer
#endif
typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
GLAPI PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
  glad_glBindRenderbuffer(target, renderbuffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindRenderbuffer\n", error);
    __debugbreak();
  }
}
#else
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
#endif
#else
#define glBindRenderbuffer glad_glBindRenderbuffer
#endif
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
GLAPI PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {
  glad_glDeleteRenderbuffers(n, renderbuffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteRenderbuffers\n", error);
    __debugbreak();
  }
}
#else
void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
#endif
#else
#define glDeleteRenderbuffers glad_glDeleteRenderbuffers
#endif
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
GLAPI PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {
  glad_glGenRenderbuffers(n, renderbuffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenRenderbuffers\n", error);
    __debugbreak();
  }
}
#else
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
#endif
#else
#define glGenRenderbuffers glad_glGenRenderbuffers
#endif
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  glad_glRenderbufferStorage(target, internalformat, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glRenderbufferStorage\n", error);
    __debugbreak();
  }
}
#else
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#else
#define glRenderbufferStorage glad_glRenderbufferStorage
#endif
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  glad_glGetRenderbufferParameteriv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetRenderbufferParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
#endif
#else
#define glGetRenderbufferParameteriv glad_glGetRenderbufferParameteriv
#endif
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
GLAPI PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsFramebuffer(GLuint framebuffer) {
  GLboolean result = glad_glIsFramebuffer(framebuffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsFramebuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsFramebuffer(GLuint framebuffer);
#endif
#else
#define glIsFramebuffer glad_glIsFramebuffer
#endif
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
GLAPI PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindFramebuffer(GLenum target, GLuint framebuffer) {
  glad_glBindFramebuffer(target, framebuffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindFramebuffer\n", error);
    __debugbreak();
  }
}
#else
void glBindFramebuffer(GLenum target, GLuint framebuffer);
#endif
#else
#define glBindFramebuffer glad_glBindFramebuffer
#endif
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {
  glad_glDeleteFramebuffers(n, framebuffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteFramebuffers\n", error);
    __debugbreak();
  }
}
#else
void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
#endif
#else
#define glDeleteFramebuffers glad_glDeleteFramebuffers
#endif
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
GLAPI PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenFramebuffers(GLsizei n, GLuint *framebuffers) {
  glad_glGenFramebuffers(n, framebuffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenFramebuffers\n", error);
    __debugbreak();
  }
}
#else
void glGenFramebuffers(GLsizei n, GLuint *framebuffers);
#endif
#else
#define glGenFramebuffers glad_glGenFramebuffers
#endif
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLenum glCheckFramebufferStatus(GLenum target) {
  GLenum result = glad_glCheckFramebufferStatus(target);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCheckFramebufferStatus\n", error);
    __debugbreak();
  }
return result;
}
#else
GLenum glCheckFramebufferStatus(GLenum target);
#endif
#else
#define glCheckFramebufferStatus glad_glCheckFramebufferStatus
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  glad_glFramebufferTexture1D(target, attachment, textarget, texture, level);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferTexture1D\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#endif
#else
#define glFramebufferTexture1D glad_glFramebufferTexture1D
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  glad_glFramebufferTexture2D(target, attachment, textarget, texture, level);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferTexture2D\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#endif
#else
#define glFramebufferTexture2D glad_glFramebufferTexture2D
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  glad_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferTexture3D\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
#endif
#else
#define glFramebufferTexture3D glad_glFramebufferTexture3D
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  glad_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferRenderbuffer\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
#endif
#else
#define glFramebufferRenderbuffer glad_glFramebufferRenderbuffer
#endif
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  glad_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetFramebufferAttachmentParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
#endif
#else
#define glGetFramebufferAttachmentParameteriv glad_glGetFramebufferAttachmentParameteriv
#endif
typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
GLAPI PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenerateMipmap(GLenum target) {
  glad_glGenerateMipmap(target);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenerateMipmap\n", error);
    __debugbreak();
  }
}
#else
void glGenerateMipmap(GLenum target);
#endif
#else
#define glGenerateMipmap glad_glGenerateMipmap
#endif
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  glad_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlitFramebuffer\n", error);
    __debugbreak();
  }
}
#else
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#endif
#else
#define glBlitFramebuffer glad_glBlitFramebuffer
#endif
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  glad_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glRenderbufferStorageMultisample\n", error);
    __debugbreak();
  }
}
#else
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#else
#define glRenderbufferStorageMultisample glad_glRenderbufferStorageMultisample
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  glad_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferTextureLayer\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
#endif
#else
#define glFramebufferTextureLayer glad_glFramebufferTextureLayer
#endif
typedef void * (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void * result = glad_glMapBufferRange(target, offset, length, access);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMapBufferRange\n", error);
    __debugbreak();
  }
return result;
}
#else
void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
#endif
#else
#define glMapBufferRange glad_glMapBufferRange
#endif
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  glad_glFlushMappedBufferRange(target, offset, length);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFlushMappedBufferRange\n", error);
    __debugbreak();
  }
}
#else
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
#endif
#else
#define glFlushMappedBufferRange glad_glFlushMappedBufferRange
#endif
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindVertexArray(GLuint array) {
  glad_glBindVertexArray(array);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindVertexArray\n", error);
    __debugbreak();
  }
}
#else
void glBindVertexArray(GLuint array);
#endif
#else
#define glBindVertexArray glad_glBindVertexArray
#endif
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {
  glad_glDeleteVertexArrays(n, arrays);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteVertexArrays\n", error);
    __debugbreak();
  }
}
#else
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
#endif
#else
#define glDeleteVertexArrays glad_glDeleteVertexArrays
#endif
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
GLAPI PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenVertexArrays(GLsizei n, GLuint *arrays) {
  glad_glGenVertexArrays(n, arrays);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenVertexArrays\n", error);
    __debugbreak();
  }
}
#else
void glGenVertexArrays(GLsizei n, GLuint *arrays);
#endif
#else
#define glGenVertexArrays glad_glGenVertexArrays
#endif
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsVertexArray(GLuint array) {
  GLboolean result = glad_glIsVertexArray(array);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsVertexArray\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsVertexArray(GLuint array);
#endif
#else
#define glIsVertexArray glad_glIsVertexArray
#endif
#endif
#ifndef GL_VERSION_3_1
#define GL_VERSION_3_1 1
GLAPI int GLAD_GL_VERSION_3_1;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  glad_glDrawArraysInstanced(mode, first, count, instancecount);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawArraysInstanced\n", error);
    __debugbreak();
  }
}
#else
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
#endif
#else
#define glDrawArraysInstanced glad_glDrawArraysInstanced
#endif
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {
  glad_glDrawElementsInstanced(mode, count, type, indices, instancecount);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElementsInstanced\n", error);
    __debugbreak();
  }
}
#else
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
#endif
#else
#define glDrawElementsInstanced glad_glDrawElementsInstanced
#endif
typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFERPROC glad_glTexBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  glad_glTexBuffer(target, internalformat, buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexBuffer\n", error);
    __debugbreak();
  }
}
#else
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
#endif
#else
#define glTexBuffer glad_glTexBuffer
#endif
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPrimitiveRestartIndex(GLuint index) {
  glad_glPrimitiveRestartIndex(index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPrimitiveRestartIndex\n", error);
    __debugbreak();
  }
}
#else
void glPrimitiveRestartIndex(GLuint index);
#endif
#else
#define glPrimitiveRestartIndex glad_glPrimitiveRestartIndex
#endif
typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  glad_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
#endif
#else
#define glCopyBufferSubData glad_glCopyBufferSubData
#endif
typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GLAPI PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {
  glad_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformIndices\n", error);
    __debugbreak();
  }
}
#else
void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
#endif
#else
#define glGetUniformIndices glad_glGetUniformIndices
#endif
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
  glad_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveUniformsiv\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#else
#define glGetActiveUniformsiv glad_glGetActiveUniformsiv
#endif
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
  glad_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveUniformName\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#else
#define glGetActiveUniformName glad_glGetActiveUniformName
#endif
typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {
  GLuint result = glad_glGetUniformBlockIndex(program, uniformBlockName);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformBlockIndex\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
#endif
#else
#define glGetUniformBlockIndex glad_glGetUniformBlockIndex
#endif
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
  glad_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveUniformBlockiv\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#else
#define glGetActiveUniformBlockiv glad_glGetActiveUniformBlockiv
#endif
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
  glad_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveUniformBlockName\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#else
#define glGetActiveUniformBlockName glad_glGetActiveUniformBlockName
#endif
typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  glad_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformBlockBinding\n", error);
    __debugbreak();
  }
}
#else
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
#else
#define glUniformBlockBinding glad_glUniformBlockBinding
#endif
#endif
#ifndef GL_VERSION_3_2
#define GL_VERSION_3_2 1
GLAPI int GLAD_GL_VERSION_3_2;
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
  glad_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElementsBaseVertex\n", error);
    __debugbreak();
  }
}
#else
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
#endif
#else
#define glDrawElementsBaseVertex glad_glDrawElementsBaseVertex
#endif
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
  glad_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawRangeElementsBaseVertex\n", error);
    __debugbreak();
  }
}
#else
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
#endif
#else
#define glDrawRangeElementsBaseVertex glad_glDrawRangeElementsBaseVertex
#endif
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {
  glad_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElementsInstancedBaseVertex\n", error);
    __debugbreak();
  }
}
#else
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
#endif
#else
#define glDrawElementsInstancedBaseVertex glad_glDrawElementsInstancedBaseVertex
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {
  glad_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawElementsBaseVertex\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
#endif
#else
#define glMultiDrawElementsBaseVertex glad_glMultiDrawElementsBaseVertex
#endif
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
GLAPI PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProvokingVertex(GLenum mode) {
  glad_glProvokingVertex(mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProvokingVertex\n", error);
    __debugbreak();
  }
}
#else
void glProvokingVertex(GLenum mode);
#endif
#else
#define glProvokingVertex glad_glProvokingVertex
#endif
typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
GLAPI PFNGLFENCESYNCPROC glad_glFenceSync;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLsync glFenceSync(GLenum condition, GLbitfield flags) {
  GLsync result = glad_glFenceSync(condition, flags);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFenceSync\n", error);
    __debugbreak();
  }
return result;
}
#else
GLsync glFenceSync(GLenum condition, GLbitfield flags);
#endif
#else
#define glFenceSync glad_glFenceSync
#endif
typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
GLAPI PFNGLISSYNCPROC glad_glIsSync;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsSync(GLsync sync) {
  GLboolean result = glad_glIsSync(sync);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsSync\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsSync(GLsync sync);
#endif
#else
#define glIsSync glad_glIsSync
#endif
typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
GLAPI PFNGLDELETESYNCPROC glad_glDeleteSync;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteSync(GLsync sync) {
  glad_glDeleteSync(sync);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteSync\n", error);
    __debugbreak();
  }
}
#else
void glDeleteSync(GLsync sync);
#endif
#else
#define glDeleteSync glad_glDeleteSync
#endif
typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  GLenum result = glad_glClientWaitSync(sync, flags, timeout);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClientWaitSync\n", error);
    __debugbreak();
  }
return result;
}
#else
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
#endif
#else
#define glClientWaitSync glad_glClientWaitSync
#endif
typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLWAITSYNCPROC glad_glWaitSync;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  glad_glWaitSync(sync, flags, timeout);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glWaitSync\n", error);
    __debugbreak();
  }
}
#else
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
#endif
#else
#define glWaitSync glad_glWaitSync
#endif
typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
GLAPI PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetInteger64v(GLenum pname, GLint64 *data) {
  glad_glGetInteger64v(pname, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetInteger64v\n", error);
    __debugbreak();
  }
}
#else
void glGetInteger64v(GLenum pname, GLint64 *data);
#endif
#else
#define glGetInteger64v glad_glGetInteger64v
#endif
typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
GLAPI PFNGLGETSYNCIVPROC glad_glGetSynciv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values) {
  glad_glGetSynciv(sync, pname, count, length, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSynciv\n", error);
    __debugbreak();
  }
}
#else
void glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
#endif
#else
#define glGetSynciv glad_glGetSynciv
#endif
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
GLAPI PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {
  glad_glGetInteger64i_v(target, index, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetInteger64i_v\n", error);
    __debugbreak();
  }
}
#else
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
#endif
#else
#define glGetInteger64i_v glad_glGetInteger64i_v
#endif
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {
  glad_glGetBufferParameteri64v(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetBufferParameteri64v\n", error);
    __debugbreak();
  }
}
#else
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
#endif
#else
#define glGetBufferParameteri64v glad_glGetBufferParameteri64v
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  glad_glFramebufferTexture(target, attachment, texture, level);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferTexture\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
#endif
#else
#define glFramebufferTexture glad_glFramebufferTexture
#endif
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  glad_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexImage2DMultisample\n", error);
    __debugbreak();
  }
}
#else
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
#endif
#else
#define glTexImage2DMultisample glad_glTexImage2DMultisample
#endif
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  glad_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexImage3DMultisample\n", error);
    __debugbreak();
  }
}
#else
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif
#else
#define glTexImage3DMultisample glad_glTexImage3DMultisample
#endif
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
GLAPI PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {
  glad_glGetMultisamplefv(pname, index, val);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetMultisamplefv\n", error);
    __debugbreak();
  }
}
#else
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
#endif
#else
#define glGetMultisamplefv glad_glGetMultisamplefv
#endif
typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
GLAPI PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSampleMaski(GLuint maskNumber, GLbitfield mask) {
  glad_glSampleMaski(maskNumber, mask);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSampleMaski\n", error);
    __debugbreak();
  }
}
#else
void glSampleMaski(GLuint maskNumber, GLbitfield mask);
#endif
#else
#define glSampleMaski glad_glSampleMaski
#endif
#endif
#ifndef GL_VERSION_3_3
#define GL_VERSION_3_3 1
GLAPI int GLAD_GL_VERSION_3_3;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {
  glad_glBindFragDataLocationIndexed(program, colorNumber, index, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindFragDataLocationIndexed\n", error);
    __debugbreak();
  }
}
#else
void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
#endif
#else
#define glBindFragDataLocationIndexed glad_glBindFragDataLocationIndexed
#endif
typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetFragDataIndex(GLuint program, const GLchar *name) {
  GLint result = glad_glGetFragDataIndex(program, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetFragDataIndex\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetFragDataIndex(GLuint program, const GLchar *name);
#endif
#else
#define glGetFragDataIndex glad_glGetFragDataIndex
#endif
typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
GLAPI PFNGLGENSAMPLERSPROC glad_glGenSamplers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenSamplers(GLsizei count, GLuint *samplers) {
  glad_glGenSamplers(count, samplers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenSamplers\n", error);
    __debugbreak();
  }
}
#else
void glGenSamplers(GLsizei count, GLuint *samplers);
#endif
#else
#define glGenSamplers glad_glGenSamplers
#endif
typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
GLAPI PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteSamplers(GLsizei count, const GLuint *samplers) {
  glad_glDeleteSamplers(count, samplers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteSamplers\n", error);
    __debugbreak();
  }
}
#else
void glDeleteSamplers(GLsizei count, const GLuint *samplers);
#endif
#else
#define glDeleteSamplers glad_glDeleteSamplers
#endif
typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
GLAPI PFNGLISSAMPLERPROC glad_glIsSampler;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsSampler(GLuint sampler) {
  GLboolean result = glad_glIsSampler(sampler);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsSampler\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsSampler(GLuint sampler);
#endif
#else
#define glIsSampler glad_glIsSampler
#endif
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
GLAPI PFNGLBINDSAMPLERPROC glad_glBindSampler;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindSampler(GLuint unit, GLuint sampler) {
  glad_glBindSampler(unit, sampler);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindSampler\n", error);
    __debugbreak();
  }
}
#else
void glBindSampler(GLuint unit, GLuint sampler);
#endif
#else
#define glBindSampler glad_glBindSampler
#endif
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
GLAPI PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  glad_glSamplerParameteri(sampler, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSamplerParameteri\n", error);
    __debugbreak();
  }
}
#else
void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
#endif
#else
#define glSamplerParameteri glad_glSamplerParameteri
#endif
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
GLAPI PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {
  glad_glSamplerParameteriv(sampler, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSamplerParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
#endif
#else
#define glSamplerParameteriv glad_glSamplerParameteriv
#endif
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
GLAPI PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  glad_glSamplerParameterf(sampler, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSamplerParameterf\n", error);
    __debugbreak();
  }
}
#else
void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
#endif
#else
#define glSamplerParameterf glad_glSamplerParameterf
#endif
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
GLAPI PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {
  glad_glSamplerParameterfv(sampler, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSamplerParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
#endif
#else
#define glSamplerParameterfv glad_glSamplerParameterfv
#endif
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
GLAPI PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {
  glad_glSamplerParameterIiv(sampler, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSamplerParameterIiv\n", error);
    __debugbreak();
  }
}
#else
void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
#endif
#else
#define glSamplerParameterIiv glad_glSamplerParameterIiv
#endif
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {
  glad_glSamplerParameterIuiv(sampler, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSamplerParameterIuiv\n", error);
    __debugbreak();
  }
}
#else
void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
#endif
#else
#define glSamplerParameterIuiv glad_glSamplerParameterIuiv
#endif
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {
  glad_glGetSamplerParameteriv(sampler, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSamplerParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
#endif
#else
#define glGetSamplerParameteriv glad_glGetSamplerParameteriv
#endif
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {
  glad_glGetSamplerParameterIiv(sampler, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSamplerParameterIiv\n", error);
    __debugbreak();
  }
}
#else
void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
#endif
#else
#define glGetSamplerParameterIiv glad_glGetSamplerParameterIiv
#endif
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {
  glad_glGetSamplerParameterfv(sampler, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSamplerParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
#endif
#else
#define glGetSamplerParameterfv glad_glGetSamplerParameterfv
#endif
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {
  glad_glGetSamplerParameterIuiv(sampler, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSamplerParameterIuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
#endif
#else
#define glGetSamplerParameterIuiv glad_glGetSamplerParameterIuiv
#endif
typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
GLAPI PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glQueryCounter(GLuint id, GLenum target) {
  glad_glQueryCounter(id, target);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glQueryCounter\n", error);
    __debugbreak();
  }
}
#else
void glQueryCounter(GLuint id, GLenum target);
#endif
#else
#define glQueryCounter glad_glQueryCounter
#endif
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
GLAPI PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {
  glad_glGetQueryObjecti64v(id, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryObjecti64v\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
#endif
#else
#define glGetQueryObjecti64v glad_glGetQueryObjecti64v
#endif
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
GLAPI PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {
  glad_glGetQueryObjectui64v(id, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryObjectui64v\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
#endif
#else
#define glGetQueryObjectui64v glad_glGetQueryObjectui64v
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribDivisor(GLuint index, GLuint divisor) {
  glad_glVertexAttribDivisor(index, divisor);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribDivisor\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribDivisor(GLuint index, GLuint divisor);
#endif
#else
#define glVertexAttribDivisor glad_glVertexAttribDivisor
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glad_glVertexAttribP1ui(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP1ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#endif
#else
#define glVertexAttribP1ui glad_glVertexAttribP1ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glad_glVertexAttribP1uiv(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP1uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
#endif
#else
#define glVertexAttribP1uiv glad_glVertexAttribP1uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glad_glVertexAttribP2ui(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP2ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#endif
#else
#define glVertexAttribP2ui glad_glVertexAttribP2ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glad_glVertexAttribP2uiv(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP2uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
#endif
#else
#define glVertexAttribP2uiv glad_glVertexAttribP2uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glad_glVertexAttribP3ui(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP3ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#endif
#else
#define glVertexAttribP3ui glad_glVertexAttribP3ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glad_glVertexAttribP3uiv(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
#endif
#else
#define glVertexAttribP3uiv glad_glVertexAttribP3uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glad_glVertexAttribP4ui(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP4ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#endif
#else
#define glVertexAttribP4ui glad_glVertexAttribP4ui
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glad_glVertexAttribP4uiv(index, type, normalized, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribP4uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
#endif
#else
#define glVertexAttribP4uiv glad_glVertexAttribP4uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexP2ui(GLenum type, GLuint value) {
  glad_glVertexP2ui(type, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexP2ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexP2ui(GLenum type, GLuint value);
#endif
#else
#define glVertexP2ui glad_glVertexP2ui
#endif
typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
GLAPI PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexP2uiv(GLenum type, const GLuint *value) {
  glad_glVertexP2uiv(type, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexP2uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexP2uiv(GLenum type, const GLuint *value);
#endif
#else
#define glVertexP2uiv glad_glVertexP2uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexP3ui(GLenum type, GLuint value) {
  glad_glVertexP3ui(type, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexP3ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexP3ui(GLenum type, GLuint value);
#endif
#else
#define glVertexP3ui glad_glVertexP3ui
#endif
typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
GLAPI PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexP3uiv(GLenum type, const GLuint *value) {
  glad_glVertexP3uiv(type, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexP3uiv(GLenum type, const GLuint *value);
#endif
#else
#define glVertexP3uiv glad_glVertexP3uiv
#endif
typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexP4ui(GLenum type, GLuint value) {
  glad_glVertexP4ui(type, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexP4ui\n", error);
    __debugbreak();
  }
}
#else
void glVertexP4ui(GLenum type, GLuint value);
#endif
#else
#define glVertexP4ui glad_glVertexP4ui
#endif
typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
GLAPI PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexP4uiv(GLenum type, const GLuint *value) {
  glad_glVertexP4uiv(type, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexP4uiv\n", error);
    __debugbreak();
  }
}
#else
void glVertexP4uiv(GLenum type, const GLuint *value);
#endif
#else
#define glVertexP4uiv glad_glVertexP4uiv
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP1ui(GLenum type, GLuint coords) {
  glad_glTexCoordP1ui(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP1ui\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP1ui(GLenum type, GLuint coords);
#endif
#else
#define glTexCoordP1ui glad_glTexCoordP1ui
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP1uiv(GLenum type, const GLuint *coords) {
  glad_glTexCoordP1uiv(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP1uiv\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP1uiv(GLenum type, const GLuint *coords);
#endif
#else
#define glTexCoordP1uiv glad_glTexCoordP1uiv
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP2ui(GLenum type, GLuint coords) {
  glad_glTexCoordP2ui(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP2ui\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP2ui(GLenum type, GLuint coords);
#endif
#else
#define glTexCoordP2ui glad_glTexCoordP2ui
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP2uiv(GLenum type, const GLuint *coords) {
  glad_glTexCoordP2uiv(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP2uiv\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP2uiv(GLenum type, const GLuint *coords);
#endif
#else
#define glTexCoordP2uiv glad_glTexCoordP2uiv
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP3ui(GLenum type, GLuint coords) {
  glad_glTexCoordP3ui(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP3ui\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP3ui(GLenum type, GLuint coords);
#endif
#else
#define glTexCoordP3ui glad_glTexCoordP3ui
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP3uiv(GLenum type, const GLuint *coords) {
  glad_glTexCoordP3uiv(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP3uiv(GLenum type, const GLuint *coords);
#endif
#else
#define glTexCoordP3uiv glad_glTexCoordP3uiv
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP4ui(GLenum type, GLuint coords) {
  glad_glTexCoordP4ui(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP4ui\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP4ui(GLenum type, GLuint coords);
#endif
#else
#define glTexCoordP4ui glad_glTexCoordP4ui
#endif
typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexCoordP4uiv(GLenum type, const GLuint *coords) {
  glad_glTexCoordP4uiv(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexCoordP4uiv\n", error);
    __debugbreak();
  }
}
#else
void glTexCoordP4uiv(GLenum type, const GLuint *coords);
#endif
#else
#define glTexCoordP4uiv glad_glTexCoordP4uiv
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
  glad_glMultiTexCoordP1ui(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP1ui\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
#endif
#else
#define glMultiTexCoordP1ui glad_glMultiTexCoordP1ui
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glad_glMultiTexCoordP1uiv(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP1uiv\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
#endif
#else
#define glMultiTexCoordP1uiv glad_glMultiTexCoordP1uiv
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
  glad_glMultiTexCoordP2ui(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP2ui\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
#endif
#else
#define glMultiTexCoordP2ui glad_glMultiTexCoordP2ui
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glad_glMultiTexCoordP2uiv(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP2uiv\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
#endif
#else
#define glMultiTexCoordP2uiv glad_glMultiTexCoordP2uiv
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
  glad_glMultiTexCoordP3ui(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP3ui\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
#endif
#else
#define glMultiTexCoordP3ui glad_glMultiTexCoordP3ui
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glad_glMultiTexCoordP3uiv(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
#endif
#else
#define glMultiTexCoordP3uiv glad_glMultiTexCoordP3uiv
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
  glad_glMultiTexCoordP4ui(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP4ui\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
#endif
#else
#define glMultiTexCoordP4ui glad_glMultiTexCoordP4ui
#endif
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glad_glMultiTexCoordP4uiv(texture, type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiTexCoordP4uiv\n", error);
    __debugbreak();
  }
}
#else
void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
#endif
#else
#define glMultiTexCoordP4uiv glad_glMultiTexCoordP4uiv
#endif
typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLNORMALP3UIPROC glad_glNormalP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNormalP3ui(GLenum type, GLuint coords) {
  glad_glNormalP3ui(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNormalP3ui\n", error);
    __debugbreak();
  }
}
#else
void glNormalP3ui(GLenum type, GLuint coords);
#endif
#else
#define glNormalP3ui glad_glNormalP3ui
#endif
typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNormalP3uiv(GLenum type, const GLuint *coords) {
  glad_glNormalP3uiv(type, coords);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNormalP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glNormalP3uiv(GLenum type, const GLuint *coords);
#endif
#else
#define glNormalP3uiv glad_glNormalP3uiv
#endif
typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP3UIPROC glad_glColorP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glColorP3ui(GLenum type, GLuint color) {
  glad_glColorP3ui(type, color);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glColorP3ui\n", error);
    __debugbreak();
  }
}
#else
void glColorP3ui(GLenum type, GLuint color);
#endif
#else
#define glColorP3ui glad_glColorP3ui
#endif
typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
GLAPI PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glColorP3uiv(GLenum type, const GLuint *color) {
  glad_glColorP3uiv(type, color);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glColorP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glColorP3uiv(GLenum type, const GLuint *color);
#endif
#else
#define glColorP3uiv glad_glColorP3uiv
#endif
typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP4UIPROC glad_glColorP4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glColorP4ui(GLenum type, GLuint color) {
  glad_glColorP4ui(type, color);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glColorP4ui\n", error);
    __debugbreak();
  }
}
#else
void glColorP4ui(GLenum type, GLuint color);
#endif
#else
#define glColorP4ui glad_glColorP4ui
#endif
typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
GLAPI PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glColorP4uiv(GLenum type, const GLuint *color) {
  glad_glColorP4uiv(type, color);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glColorP4uiv\n", error);
    __debugbreak();
  }
}
#else
void glColorP4uiv(GLenum type, const GLuint *color);
#endif
#else
#define glColorP4uiv glad_glColorP4uiv
#endif
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSecondaryColorP3ui(GLenum type, GLuint color) {
  glad_glSecondaryColorP3ui(type, color);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSecondaryColorP3ui\n", error);
    __debugbreak();
  }
}
#else
void glSecondaryColorP3ui(GLenum type, GLuint color);
#endif
#else
#define glSecondaryColorP3ui glad_glSecondaryColorP3ui
#endif
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
GLAPI PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSecondaryColorP3uiv(GLenum type, const GLuint *color) {
  glad_glSecondaryColorP3uiv(type, color);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSecondaryColorP3uiv\n", error);
    __debugbreak();
  }
}
#else
void glSecondaryColorP3uiv(GLenum type, const GLuint *color);
#endif
#else
#define glSecondaryColorP3uiv glad_glSecondaryColorP3uiv
#endif
#endif
#ifndef GL_VERSION_4_0
#define GL_VERSION_4_0 1
GLAPI int GLAD_GL_VERSION_4_0;
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
GLAPI PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMinSampleShading(GLfloat value) {
  glad_glMinSampleShading(value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMinSampleShading\n", error);
    __debugbreak();
  }
}
#else
void glMinSampleShading(GLfloat value);
#endif
#else
#define glMinSampleShading glad_glMinSampleShading
#endif
typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
GLAPI PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendEquationi(GLuint buf, GLenum mode) {
  glad_glBlendEquationi(buf, mode);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendEquationi\n", error);
    __debugbreak();
  }
}
#else
void glBlendEquationi(GLuint buf, GLenum mode);
#endif
#else
#define glBlendEquationi glad_glBlendEquationi
#endif
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  glad_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendEquationSeparatei\n", error);
    __debugbreak();
  }
}
#else
void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
#endif
#else
#define glBlendEquationSeparatei glad_glBlendEquationSeparatei
#endif
typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
GLAPI PFNGLBLENDFUNCIPROC glad_glBlendFunci;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  glad_glBlendFunci(buf, src, dst);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendFunci\n", error);
    __debugbreak();
  }
}
#else
void glBlendFunci(GLuint buf, GLenum src, GLenum dst);
#endif
#else
#define glBlendFunci glad_glBlendFunci
#endif
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  glad_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlendFuncSeparatei\n", error);
    __debugbreak();
  }
}
#else
void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#endif
#else
#define glBlendFuncSeparatei glad_glBlendFuncSeparatei
#endif
typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
GLAPI PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawArraysIndirect(GLenum mode, const void *indirect) {
  glad_glDrawArraysIndirect(mode, indirect);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawArraysIndirect\n", error);
    __debugbreak();
  }
}
#else
void glDrawArraysIndirect(GLenum mode, const void *indirect);
#endif
#else
#define glDrawArraysIndirect glad_glDrawArraysIndirect
#endif
typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {
  glad_glDrawElementsIndirect(mode, type, indirect);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElementsIndirect\n", error);
    __debugbreak();
  }
}
#else
void glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
#endif
#else
#define glDrawElementsIndirect glad_glDrawElementsIndirect
#endif
typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
GLAPI PFNGLUNIFORM1DPROC glad_glUniform1d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1d(GLint location, GLdouble x) {
  glad_glUniform1d(location, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1d\n", error);
    __debugbreak();
  }
}
#else
void glUniform1d(GLint location, GLdouble x);
#endif
#else
#define glUniform1d glad_glUniform1d
#endif
typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
GLAPI PFNGLUNIFORM2DPROC glad_glUniform2d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2d(GLint location, GLdouble x, GLdouble y) {
  glad_glUniform2d(location, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2d\n", error);
    __debugbreak();
  }
}
#else
void glUniform2d(GLint location, GLdouble x, GLdouble y);
#endif
#else
#define glUniform2d glad_glUniform2d
#endif
typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLUNIFORM3DPROC glad_glUniform3d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
  glad_glUniform3d(location, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3d\n", error);
    __debugbreak();
  }
}
#else
void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
#endif
#else
#define glUniform3d glad_glUniform3d
#endif
typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLUNIFORM4DPROC glad_glUniform4d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glad_glUniform4d(location, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4d\n", error);
    __debugbreak();
  }
}
#else
void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#endif
#else
#define glUniform4d glad_glUniform4d
#endif
typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM1DVPROC glad_glUniform1dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {
  glad_glUniform1dv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform1dv\n", error);
    __debugbreak();
  }
}
#else
void glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glUniform1dv glad_glUniform1dv
#endif
typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM2DVPROC glad_glUniform2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {
  glad_glUniform2dv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform2dv\n", error);
    __debugbreak();
  }
}
#else
void glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glUniform2dv glad_glUniform2dv
#endif
typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM3DVPROC glad_glUniform3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {
  glad_glUniform3dv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform3dv\n", error);
    __debugbreak();
  }
}
#else
void glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glUniform3dv glad_glUniform3dv
#endif
typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM4DVPROC glad_glUniform4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {
  glad_glUniform4dv(location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniform4dv\n", error);
    __debugbreak();
  }
}
#else
void glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glUniform4dv glad_glUniform4dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix2dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix2dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix2dv glad_glUniformMatrix2dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix3dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix3dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix3dv glad_glUniformMatrix3dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix4dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix4dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix4dv glad_glUniformMatrix4dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix2x3dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix2x3dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix2x3dv glad_glUniformMatrix2x3dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix2x4dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix2x4dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix2x4dv glad_glUniformMatrix2x4dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix3x2dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix3x2dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix3x2dv glad_glUniformMatrix3x2dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix3x4dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix3x4dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix3x4dv glad_glUniformMatrix3x4dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix4x2dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix4x2dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix4x2dv glad_glUniformMatrix4x2dv
#endif
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glUniformMatrix4x3dv(location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformMatrix4x3dv\n", error);
    __debugbreak();
  }
}
#else
void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glUniformMatrix4x3dv glad_glUniformMatrix4x3dv
#endif
typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
GLAPI PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetUniformdv(GLuint program, GLint location, GLdouble *params) {
  glad_glGetUniformdv(program, location, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformdv\n", error);
    __debugbreak();
  }
}
#else
void glGetUniformdv(GLuint program, GLint location, GLdouble *params);
#endif
#else
#define glGetUniformdv glad_glGetUniformdv
#endif
typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {
  GLint result = glad_glGetSubroutineUniformLocation(program, shadertype, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSubroutineUniformLocation\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
#endif
#else
#define glGetSubroutineUniformLocation glad_glGetSubroutineUniformLocation
#endif
typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
GLAPI PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {
  GLuint result = glad_glGetSubroutineIndex(program, shadertype, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetSubroutineIndex\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
#endif
#else
#define glGetSubroutineIndex glad_glGetSubroutineIndex
#endif
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {
  glad_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveSubroutineUniformiv\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
#endif
#else
#define glGetActiveSubroutineUniformiv glad_glGetActiveSubroutineUniformiv
#endif
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  glad_glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveSubroutineUniformName\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
#endif
#else
#define glGetActiveSubroutineUniformName glad_glGetActiveSubroutineUniformName
#endif
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  glad_glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveSubroutineName\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
#endif
#else
#define glGetActiveSubroutineName glad_glGetActiveSubroutineName
#endif
typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {
  glad_glUniformSubroutinesuiv(shadertype, count, indices);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUniformSubroutinesuiv\n", error);
    __debugbreak();
  }
}
#else
void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
#endif
#else
#define glUniformSubroutinesuiv glad_glUniformSubroutinesuiv
#endif
typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {
  glad_glGetUniformSubroutineuiv(shadertype, location, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetUniformSubroutineuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
#endif
#else
#define glGetUniformSubroutineuiv glad_glGetUniformSubroutineuiv
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
GLAPI PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {
  glad_glGetProgramStageiv(program, shadertype, pname, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramStageiv\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
#endif
#else
#define glGetProgramStageiv glad_glGetProgramStageiv
#endif
typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
GLAPI PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPatchParameteri(GLenum pname, GLint value) {
  glad_glPatchParameteri(pname, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPatchParameteri\n", error);
    __debugbreak();
  }
}
#else
void glPatchParameteri(GLenum pname, GLint value);
#endif
#else
#define glPatchParameteri glad_glPatchParameteri
#endif
typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
GLAPI PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPatchParameterfv(GLenum pname, const GLfloat *values) {
  glad_glPatchParameterfv(pname, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPatchParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glPatchParameterfv(GLenum pname, const GLfloat *values);
#endif
#else
#define glPatchParameterfv glad_glPatchParameterfv
#endif
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindTransformFeedback(GLenum target, GLuint id) {
  glad_glBindTransformFeedback(target, id);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindTransformFeedback\n", error);
    __debugbreak();
  }
}
#else
void glBindTransformFeedback(GLenum target, GLuint id);
#endif
#else
#define glBindTransformFeedback glad_glBindTransformFeedback
#endif
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {
  glad_glDeleteTransformFeedbacks(n, ids);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteTransformFeedbacks\n", error);
    __debugbreak();
  }
}
#else
void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
#endif
#else
#define glDeleteTransformFeedbacks glad_glDeleteTransformFeedbacks
#endif
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenTransformFeedbacks(GLsizei n, GLuint *ids) {
  glad_glGenTransformFeedbacks(n, ids);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenTransformFeedbacks\n", error);
    __debugbreak();
  }
}
#else
void glGenTransformFeedbacks(GLsizei n, GLuint *ids);
#endif
#else
#define glGenTransformFeedbacks glad_glGenTransformFeedbacks
#endif
typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
GLAPI PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsTransformFeedback(GLuint id) {
  GLboolean result = glad_glIsTransformFeedback(id);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsTransformFeedback\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsTransformFeedback(GLuint id);
#endif
#else
#define glIsTransformFeedback glad_glIsTransformFeedback
#endif
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPauseTransformFeedback(void) {
  glad_glPauseTransformFeedback();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPauseTransformFeedback\n", error);
    __debugbreak();
  }
}
#else
void glPauseTransformFeedback(void);
#endif
#else
#define glPauseTransformFeedback glad_glPauseTransformFeedback
#endif
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glResumeTransformFeedback(void) {
  glad_glResumeTransformFeedback();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glResumeTransformFeedback\n", error);
    __debugbreak();
  }
}
#else
void glResumeTransformFeedback(void);
#endif
#else
#define glResumeTransformFeedback glad_glResumeTransformFeedback
#endif
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawTransformFeedback(GLenum mode, GLuint id) {
  glad_glDrawTransformFeedback(mode, id);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawTransformFeedback\n", error);
    __debugbreak();
  }
}
#else
void glDrawTransformFeedback(GLenum mode, GLuint id);
#endif
#else
#define glDrawTransformFeedback glad_glDrawTransformFeedback
#endif
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
  glad_glDrawTransformFeedbackStream(mode, id, stream);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawTransformFeedbackStream\n", error);
    __debugbreak();
  }
}
#else
void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
#endif
#else
#define glDrawTransformFeedbackStream glad_glDrawTransformFeedbackStream
#endif
typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
GLAPI PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
  glad_glBeginQueryIndexed(target, index, id);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBeginQueryIndexed\n", error);
    __debugbreak();
  }
}
#else
void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
#endif
#else
#define glBeginQueryIndexed glad_glBeginQueryIndexed
#endif
typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
GLAPI PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEndQueryIndexed(GLenum target, GLuint index) {
  glad_glEndQueryIndexed(target, index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEndQueryIndexed\n", error);
    __debugbreak();
  }
}
#else
void glEndQueryIndexed(GLenum target, GLuint index);
#endif
#else
#define glEndQueryIndexed glad_glEndQueryIndexed
#endif
typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
GLAPI PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {
  glad_glGetQueryIndexediv(target, index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryIndexediv\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
#endif
#else
#define glGetQueryIndexediv glad_glGetQueryIndexediv
#endif
#endif
#ifndef GL_VERSION_4_1
#define GL_VERSION_4_1 1
GLAPI int GLAD_GL_VERSION_4_1;
typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)(void);
GLAPI PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glReleaseShaderCompiler(void) {
  glad_glReleaseShaderCompiler();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glReleaseShaderCompiler\n", error);
    __debugbreak();
  }
}
#else
void glReleaseShaderCompiler(void);
#endif
#else
#define glReleaseShaderCompiler glad_glReleaseShaderCompiler
#endif
typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
GLAPI PFNGLSHADERBINARYPROC glad_glShaderBinary;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length) {
  glad_glShaderBinary(count, shaders, binaryFormat, binary, length);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glShaderBinary\n", error);
    __debugbreak();
  }
}
#else
void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
#endif
#else
#define glShaderBinary glad_glShaderBinary
#endif
typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
  glad_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetShaderPrecisionFormat\n", error);
    __debugbreak();
  }
}
#else
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
#endif
#else
#define glGetShaderPrecisionFormat glad_glGetShaderPrecisionFormat
#endif
typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
GLAPI PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDepthRangef(GLfloat n, GLfloat f) {
  glad_glDepthRangef(n, f);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDepthRangef\n", error);
    __debugbreak();
  }
}
#else
void glDepthRangef(GLfloat n, GLfloat f);
#endif
#else
#define glDepthRangef glad_glDepthRangef
#endif
typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
GLAPI PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearDepthf(GLfloat d) {
  glad_glClearDepthf(d);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearDepthf\n", error);
    __debugbreak();
  }
}
#else
void glClearDepthf(GLfloat d);
#endif
#else
#define glClearDepthf glad_glClearDepthf
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GLAPI PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
  glad_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramBinary\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
#endif
#else
#define glGetProgramBinary glad_glGetProgramBinary
#endif
typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
GLAPI PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {
  glad_glProgramBinary(program, binaryFormat, binary, length);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramBinary\n", error);
    __debugbreak();
  }
}
#else
void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
#endif
#else
#define glProgramBinary glad_glProgramBinary
#endif
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  glad_glProgramParameteri(program, pname, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramParameteri\n", error);
    __debugbreak();
  }
}
#else
void glProgramParameteri(GLuint program, GLenum pname, GLint value);
#endif
#else
#define glProgramParameteri glad_glProgramParameteri
#endif
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  glad_glUseProgramStages(pipeline, stages, program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUseProgramStages\n", error);
    __debugbreak();
  }
}
#else
void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
#endif
#else
#define glUseProgramStages glad_glUseProgramStages
#endif
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
GLAPI PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glActiveShaderProgram(GLuint pipeline, GLuint program) {
  glad_glActiveShaderProgram(pipeline, program);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glActiveShaderProgram\n", error);
    __debugbreak();
  }
}
#else
void glActiveShaderProgram(GLuint pipeline, GLuint program);
#endif
#else
#define glActiveShaderProgram glad_glActiveShaderProgram
#endif
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
GLAPI PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {
  GLuint result = glad_glCreateShaderProgramv(type, count, strings);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateShaderProgramv\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
#endif
#else
#define glCreateShaderProgramv glad_glCreateShaderProgramv
#endif
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindProgramPipeline(GLuint pipeline) {
  glad_glBindProgramPipeline(pipeline);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindProgramPipeline\n", error);
    __debugbreak();
  }
}
#else
void glBindProgramPipeline(GLuint pipeline);
#endif
#else
#define glBindProgramPipeline glad_glBindProgramPipeline
#endif
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {
  glad_glDeleteProgramPipelines(n, pipelines);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDeleteProgramPipelines\n", error);
    __debugbreak();
  }
}
#else
void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
#endif
#else
#define glDeleteProgramPipelines glad_glDeleteProgramPipelines
#endif
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
GLAPI PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenProgramPipelines(GLsizei n, GLuint *pipelines) {
  glad_glGenProgramPipelines(n, pipelines);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenProgramPipelines\n", error);
    __debugbreak();
  }
}
#else
void glGenProgramPipelines(GLsizei n, GLuint *pipelines);
#endif
#else
#define glGenProgramPipelines glad_glGenProgramPipelines
#endif
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glIsProgramPipeline(GLuint pipeline) {
  GLboolean result = glad_glIsProgramPipeline(pipeline);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glIsProgramPipeline\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glIsProgramPipeline(GLuint pipeline);
#endif
#else
#define glIsProgramPipeline glad_glIsProgramPipeline
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {
  glad_glGetProgramPipelineiv(pipeline, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramPipelineiv\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
#endif
#else
#define glGetProgramPipelineiv glad_glGetProgramPipelineiv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
GLAPI PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1i(GLuint program, GLint location, GLint v0) {
  glad_glProgramUniform1i(program, location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1i\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1i(GLuint program, GLint location, GLint v0);
#endif
#else
#define glProgramUniform1i glad_glProgramUniform1i
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glad_glProgramUniform1iv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1iv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glProgramUniform1iv glad_glProgramUniform1iv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
GLAPI PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
  glad_glProgramUniform1f(program, location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1f\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
#endif
#else
#define glProgramUniform1f glad_glProgramUniform1f
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glad_glProgramUniform1fv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glProgramUniform1fv glad_glProgramUniform1fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
GLAPI PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
  glad_glProgramUniform1d(program, location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1d\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
#endif
#else
#define glProgramUniform1d glad_glProgramUniform1d
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glad_glProgramUniform1dv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glProgramUniform1dv glad_glProgramUniform1dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
GLAPI PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  glad_glProgramUniform1ui(program, location, v0);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1ui\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
#endif
#else
#define glProgramUniform1ui glad_glProgramUniform1ui
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glad_glProgramUniform1uiv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform1uiv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glProgramUniform1uiv glad_glProgramUniform1uiv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
  glad_glProgramUniform2i(program, location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2i\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
#endif
#else
#define glProgramUniform2i glad_glProgramUniform2i
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glad_glProgramUniform2iv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2iv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glProgramUniform2iv glad_glProgramUniform2iv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  glad_glProgramUniform2f(program, location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2f\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
#endif
#else
#define glProgramUniform2f glad_glProgramUniform2f
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glad_glProgramUniform2fv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glProgramUniform2fv glad_glProgramUniform2fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLAPI PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
  glad_glProgramUniform2d(program, location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2d\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
#endif
#else
#define glProgramUniform2d glad_glProgramUniform2d
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glad_glProgramUniform2dv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glProgramUniform2dv glad_glProgramUniform2dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
  glad_glProgramUniform2ui(program, location, v0, v1);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2ui\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
#endif
#else
#define glProgramUniform2ui glad_glProgramUniform2ui
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glad_glProgramUniform2uiv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform2uiv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glProgramUniform2uiv glad_glProgramUniform2uiv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  glad_glProgramUniform3i(program, location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3i\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
#endif
#else
#define glProgramUniform3i glad_glProgramUniform3i
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glad_glProgramUniform3iv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3iv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glProgramUniform3iv glad_glProgramUniform3iv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  glad_glProgramUniform3f(program, location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3f\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
#endif
#else
#define glProgramUniform3f glad_glProgramUniform3f
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glad_glProgramUniform3fv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glProgramUniform3fv glad_glProgramUniform3fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLAPI PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
  glad_glProgramUniform3d(program, location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3d\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
#endif
#else
#define glProgramUniform3d glad_glProgramUniform3d
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glad_glProgramUniform3dv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glProgramUniform3dv glad_glProgramUniform3dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  glad_glProgramUniform3ui(program, location, v0, v1, v2);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3ui\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
#endif
#else
#define glProgramUniform3ui glad_glProgramUniform3ui
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glad_glProgramUniform3uiv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform3uiv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glProgramUniform3uiv glad_glProgramUniform3uiv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  glad_glProgramUniform4i(program, location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4i\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
#endif
#else
#define glProgramUniform4i glad_glProgramUniform4i
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glad_glProgramUniform4iv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4iv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
#endif
#else
#define glProgramUniform4iv glad_glProgramUniform4iv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  glad_glProgramUniform4f(program, location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4f\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
#endif
#else
#define glProgramUniform4f glad_glProgramUniform4f
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glad_glProgramUniform4fv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
#endif
#else
#define glProgramUniform4fv glad_glProgramUniform4fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLAPI PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
  glad_glProgramUniform4d(program, location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4d\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
#endif
#else
#define glProgramUniform4d glad_glProgramUniform4d
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glad_glProgramUniform4dv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
#endif
#else
#define glProgramUniform4dv glad_glProgramUniform4dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  glad_glProgramUniform4ui(program, location, v0, v1, v2, v3);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4ui\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
#endif
#else
#define glProgramUniform4ui glad_glProgramUniform4ui
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glad_glProgramUniform4uiv(program, location, count, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniform4uiv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
#endif
#else
#define glProgramUniform4uiv glad_glProgramUniform4uiv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix2fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix2fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix2fv glad_glProgramUniformMatrix2fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix3fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix3fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix3fv glad_glProgramUniformMatrix3fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix4fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix4fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix4fv glad_glProgramUniformMatrix4fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix2dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix2dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix2dv glad_glProgramUniformMatrix2dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix3dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix3dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix3dv glad_glProgramUniformMatrix3dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix4dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix4dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix4dv glad_glProgramUniformMatrix4dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix2x3fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix2x3fv glad_glProgramUniformMatrix2x3fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix3x2fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix3x2fv glad_glProgramUniformMatrix3x2fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix2x4fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix2x4fv glad_glProgramUniformMatrix2x4fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix4x2fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix4x2fv glad_glProgramUniformMatrix4x2fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix3x4fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix3x4fv glad_glProgramUniformMatrix3x4fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glad_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix4x3fv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#else
#define glProgramUniformMatrix4x3fv glad_glProgramUniformMatrix4x3fv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix2x3dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix2x3dv glad_glProgramUniformMatrix2x3dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix3x2dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix3x2dv glad_glProgramUniformMatrix3x2dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix2x4dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix2x4dv glad_glProgramUniformMatrix2x4dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix4x2dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix4x2dv glad_glProgramUniformMatrix4x2dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix3x4dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix3x4dv glad_glProgramUniformMatrix3x4dv
#endif
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glad_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glProgramUniformMatrix4x3dv\n", error);
    __debugbreak();
  }
}
#else
void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#else
#define glProgramUniformMatrix4x3dv glad_glProgramUniformMatrix4x3dv
#endif
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glValidateProgramPipeline(GLuint pipeline) {
  glad_glValidateProgramPipeline(pipeline);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glValidateProgramPipeline\n", error);
    __debugbreak();
  }
}
#else
void glValidateProgramPipeline(GLuint pipeline);
#endif
#else
#define glValidateProgramPipeline glad_glValidateProgramPipeline
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  glad_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramPipelineInfoLog\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
#endif
#else
#define glGetProgramPipelineInfoLog glad_glGetProgramPipelineInfoLog
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL1d(GLuint index, GLdouble x) {
  glad_glVertexAttribL1d(index, x);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL1d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL1d(GLuint index, GLdouble x);
#endif
#else
#define glVertexAttribL1d glad_glVertexAttribL1d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
  glad_glVertexAttribL2d(index, x, y);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL2d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
#endif
#else
#define glVertexAttribL2d glad_glVertexAttribL2d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  glad_glVertexAttribL3d(index, x, y, z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL3d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
#endif
#else
#define glVertexAttribL3d glad_glVertexAttribL3d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glad_glVertexAttribL4d(index, x, y, z, w);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL4d\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#endif
#else
#define glVertexAttribL4d glad_glVertexAttribL4d
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL1dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttribL1dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL1dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL1dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttribL1dv glad_glVertexAttribL1dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL2dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttribL2dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL2dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL2dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttribL2dv glad_glVertexAttribL2dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL3dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttribL3dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL3dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL3dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttribL3dv glad_glVertexAttribL3dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribL4dv(GLuint index, const GLdouble *v) {
  glad_glVertexAttribL4dv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribL4dv\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribL4dv(GLuint index, const GLdouble *v);
#endif
#else
#define glVertexAttribL4dv glad_glVertexAttribL4dv
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glad_glVertexAttribLPointer(index, size, type, stride, pointer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribLPointer\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
#endif
#else
#define glVertexAttribLPointer glad_glVertexAttribLPointer
#endif
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
GLAPI PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {
  glad_glGetVertexAttribLdv(index, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexAttribLdv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
#endif
#else
#define glGetVertexAttribLdv glad_glGetVertexAttribLdv
#endif
typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
GLAPI PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {
  glad_glViewportArrayv(first, count, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glViewportArrayv\n", error);
    __debugbreak();
  }
}
#else
void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
#endif
#else
#define glViewportArrayv glad_glViewportArrayv
#endif
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLAPI PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  glad_glViewportIndexedf(index, x, y, w, h);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glViewportIndexedf\n", error);
    __debugbreak();
  }
}
#else
void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
#endif
#else
#define glViewportIndexedf glad_glViewportIndexedf
#endif
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glViewportIndexedfv(GLuint index, const GLfloat *v) {
  glad_glViewportIndexedfv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glViewportIndexedfv\n", error);
    __debugbreak();
  }
}
#else
void glViewportIndexedfv(GLuint index, const GLfloat *v);
#endif
#else
#define glViewportIndexedfv glad_glViewportIndexedfv
#endif
typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
GLAPI PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {
  glad_glScissorArrayv(first, count, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glScissorArrayv\n", error);
    __debugbreak();
  }
}
#else
void glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
#endif
#else
#define glScissorArrayv glad_glScissorArrayv
#endif
typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  glad_glScissorIndexed(index, left, bottom, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glScissorIndexed\n", error);
    __debugbreak();
  }
}
#else
void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
#endif
#else
#define glScissorIndexed glad_glScissorIndexed
#endif
typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glScissorIndexedv(GLuint index, const GLint *v) {
  glad_glScissorIndexedv(index, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glScissorIndexedv\n", error);
    __debugbreak();
  }
}
#else
void glScissorIndexedv(GLuint index, const GLint *v);
#endif
#else
#define glScissorIndexedv glad_glScissorIndexedv
#endif
typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
GLAPI PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {
  glad_glDepthRangeArrayv(first, count, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDepthRangeArrayv\n", error);
    __debugbreak();
  }
}
#else
void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
#endif
#else
#define glDepthRangeArrayv glad_glDepthRangeArrayv
#endif
typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
  glad_glDepthRangeIndexed(index, n, f);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDepthRangeIndexed\n", error);
    __debugbreak();
  }
}
#else
void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
#endif
#else
#define glDepthRangeIndexed glad_glDepthRangeIndexed
#endif
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
GLAPI PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {
  glad_glGetFloati_v(target, index, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetFloati_v\n", error);
    __debugbreak();
  }
}
#else
void glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
#endif
#else
#define glGetFloati_v glad_glGetFloati_v
#endif
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
GLAPI PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {
  glad_glGetDoublei_v(target, index, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetDoublei_v\n", error);
    __debugbreak();
  }
}
#else
void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
#endif
#else
#define glGetDoublei_v glad_glGetDoublei_v
#endif
#endif
#ifndef GL_VERSION_4_2
#define GL_VERSION_4_2 1
GLAPI int GLAD_GL_VERSION_4_2;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  glad_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawArraysInstancedBaseInstance\n", error);
    __debugbreak();
  }
}
#else
void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
#endif
#else
#define glDrawArraysInstancedBaseInstance glad_glDrawArraysInstancedBaseInstance
#endif
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {
  glad_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElementsInstancedBaseInstance\n", error);
    __debugbreak();
  }
}
#else
void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
#endif
#else
#define glDrawElementsInstancedBaseInstance glad_glDrawElementsInstancedBaseInstance
#endif
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  glad_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawElementsInstancedBaseVertexBaseInstance\n", error);
    __debugbreak();
  }
}
#else
void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
#endif
#else
#define glDrawElementsInstancedBaseVertexBaseInstance glad_glDrawElementsInstancedBaseVertexBaseInstance
#endif
typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
GLAPI PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params) {
  glad_glGetInternalformativ(target, internalformat, pname, count, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetInternalformativ\n", error);
    __debugbreak();
  }
}
#else
void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
#endif
#else
#define glGetInternalformativ glad_glGetInternalformativ
#endif
typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
GLAPI PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
  glad_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetActiveAtomicCounterBufferiv\n", error);
    __debugbreak();
  }
}
#else
void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
#else
#define glGetActiveAtomicCounterBufferiv glad_glGetActiveAtomicCounterBufferiv
#endif
typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLAPI PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  glad_glBindImageTexture(unit, texture, level, layered, layer, access, format);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindImageTexture\n", error);
    __debugbreak();
  }
}
#else
void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#else
#define glBindImageTexture glad_glBindImageTexture
#endif
typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMemoryBarrier(GLbitfield barriers) {
  glad_glMemoryBarrier(barriers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMemoryBarrier\n", error);
    __debugbreak();
  }
}
#else
void glMemoryBarrier(GLbitfield barriers);
#endif
#else
#define glMemoryBarrier glad_glMemoryBarrier
#endif
typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  glad_glTexStorage1D(target, levels, internalformat, width);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexStorage1D\n", error);
    __debugbreak();
  }
}
#else
void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
#endif
#else
#define glTexStorage1D glad_glTexStorage1D
#endif
typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  glad_glTexStorage2D(target, levels, internalformat, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexStorage2D\n", error);
    __debugbreak();
  }
}
#else
void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#else
#define glTexStorage2D glad_glTexStorage2D
#endif
typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  glad_glTexStorage3D(target, levels, internalformat, width, height, depth);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexStorage3D\n", error);
    __debugbreak();
  }
}
#else
void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
#endif
#else
#define glTexStorage3D glad_glTexStorage3D
#endif
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
  glad_glDrawTransformFeedbackInstanced(mode, id, instancecount);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawTransformFeedbackInstanced\n", error);
    __debugbreak();
  }
}
#else
void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
#endif
#else
#define glDrawTransformFeedbackInstanced glad_glDrawTransformFeedbackInstanced
#endif
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
  glad_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDrawTransformFeedbackStreamInstanced\n", error);
    __debugbreak();
  }
}
#else
void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
#endif
#else
#define glDrawTransformFeedbackStreamInstanced glad_glDrawTransformFeedbackStreamInstanced
#endif
#endif
#ifndef GL_VERSION_4_3
#define GL_VERSION_4_3 1
GLAPI int GLAD_GL_VERSION_4_3;
typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {
  glad_glClearBufferData(target, internalformat, format, type, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearBufferData\n", error);
    __debugbreak();
  }
}
#else
void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
#endif
#else
#define glClearBufferData glad_glClearBufferData
#endif
typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
  glad_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
#endif
#else
#define glClearBufferSubData glad_glClearBufferSubData
#endif
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  glad_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDispatchCompute\n", error);
    __debugbreak();
  }
}
#else
void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
#endif
#else
#define glDispatchCompute glad_glDispatchCompute
#endif
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
GLAPI PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDispatchComputeIndirect(GLintptr indirect) {
  glad_glDispatchComputeIndirect(indirect);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDispatchComputeIndirect\n", error);
    __debugbreak();
  }
}
#else
void glDispatchComputeIndirect(GLintptr indirect);
#endif
#else
#define glDispatchComputeIndirect glad_glDispatchComputeIndirect
#endif
typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  glad_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyImageSubData\n", error);
    __debugbreak();
  }
}
#else
void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
#endif
#else
#define glCopyImageSubData glad_glCopyImageSubData
#endif
typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  glad_glFramebufferParameteri(target, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFramebufferParameteri\n", error);
    __debugbreak();
  }
}
#else
void glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
#endif
#else
#define glFramebufferParameteri glad_glFramebufferParameteri
#endif
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  glad_glGetFramebufferParameteriv(target, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetFramebufferParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
#endif
#else
#define glGetFramebufferParameteriv glad_glGetFramebufferParameteriv
#endif
typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
GLAPI PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params) {
  glad_glGetInternalformati64v(target, internalformat, pname, count, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetInternalformati64v\n", error);
    __debugbreak();
  }
}
#else
void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
#endif
#else
#define glGetInternalformati64v glad_glGetInternalformati64v
#endif
typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  glad_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateTexSubImage\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
#endif
#else
#define glInvalidateTexSubImage glad_glInvalidateTexSubImage
#endif
typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
GLAPI PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateTexImage(GLuint texture, GLint level) {
  glad_glInvalidateTexImage(texture, level);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateTexImage\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateTexImage(GLuint texture, GLint level);
#endif
#else
#define glInvalidateTexImage glad_glInvalidateTexImage
#endif
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  glad_glInvalidateBufferSubData(buffer, offset, length);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
#endif
#else
#define glInvalidateBufferSubData glad_glInvalidateBufferSubData
#endif
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
GLAPI PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateBufferData(GLuint buffer) {
  glad_glInvalidateBufferData(buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateBufferData\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateBufferData(GLuint buffer);
#endif
#else
#define glInvalidateBufferData glad_glInvalidateBufferData
#endif
typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GLAPI PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
  glad_glInvalidateFramebuffer(target, numAttachments, attachments);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateFramebuffer\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
#endif
#else
#define glInvalidateFramebuffer glad_glInvalidateFramebuffer
#endif
typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateSubFramebuffer\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glInvalidateSubFramebuffer glad_glInvalidateSubFramebuffer
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {
  glad_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawArraysIndirect\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
#endif
#else
#define glMultiDrawArraysIndirect glad_glMultiDrawArraysIndirect
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {
  glad_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawElementsIndirect\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
#endif
#else
#define glMultiDrawElementsIndirect glad_glMultiDrawElementsIndirect
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLAPI PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
  glad_glGetProgramInterfaceiv(program, programInterface, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramInterfaceiv\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
#endif
#else
#define glGetProgramInterfaceiv glad_glGetProgramInterfaceiv
#endif
typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  GLuint result = glad_glGetProgramResourceIndex(program, programInterface, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramResourceIndex\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
#endif
#else
#define glGetProgramResourceIndex glad_glGetProgramResourceIndex
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  glad_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramResourceName\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
#endif
#else
#define glGetProgramResourceName glad_glGetProgramResourceName
#endif
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
GLAPI PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params) {
  glad_glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramResourceiv\n", error);
    __debugbreak();
  }
}
#else
void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
#endif
#else
#define glGetProgramResourceiv glad_glGetProgramResourceiv
#endif
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {
  GLint result = glad_glGetProgramResourceLocation(program, programInterface, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramResourceLocation\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
#endif
#else
#define glGetProgramResourceLocation glad_glGetProgramResourceLocation
#endif
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  GLint result = glad_glGetProgramResourceLocationIndex(program, programInterface, name);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetProgramResourceLocationIndex\n", error);
    __debugbreak();
  }
return result;
}
#else
GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
#endif
#else
#define glGetProgramResourceLocationIndex glad_glGetProgramResourceLocationIndex
#endif
typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLAPI PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  glad_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glShaderStorageBlockBinding\n", error);
    __debugbreak();
  }
}
#else
void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
#endif
#else
#define glShaderStorageBlockBinding glad_glShaderStorageBlockBinding
#endif
typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  glad_glTexBufferRange(target, internalformat, buffer, offset, size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexBufferRange\n", error);
    __debugbreak();
  }
}
#else
void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif
#else
#define glTexBufferRange glad_glTexBufferRange
#endif
typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  glad_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexStorage2DMultisample\n", error);
    __debugbreak();
  }
}
#else
void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
#endif
#else
#define glTexStorage2DMultisample glad_glTexStorage2DMultisample
#endif
typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  glad_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTexStorage3DMultisample\n", error);
    __debugbreak();
  }
}
#else
void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif
#else
#define glTexStorage3DMultisample glad_glTexStorage3DMultisample
#endif
typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLAPI PFNGLTEXTUREVIEWPROC glad_glTextureView;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  glad_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureView\n", error);
    __debugbreak();
  }
}
#else
void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
#endif
#else
#define glTextureView glad_glTextureView
#endif
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  glad_glBindVertexBuffer(bindingindex, buffer, offset, stride);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindVertexBuffer\n", error);
    __debugbreak();
  }
}
#else
void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
#endif
#else
#define glBindVertexBuffer glad_glBindVertexBuffer
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  glad_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribFormat\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
#endif
#else
#define glVertexAttribFormat glad_glVertexAttribFormat
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  glad_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribIFormat\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
#endif
#else
#define glVertexAttribIFormat glad_glVertexAttribIFormat
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  glad_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribLFormat\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
#endif
#else
#define glVertexAttribLFormat glad_glVertexAttribLFormat
#endif
typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  glad_glVertexAttribBinding(attribindex, bindingindex);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexAttribBinding\n", error);
    __debugbreak();
  }
}
#else
void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
#endif
#else
#define glVertexAttribBinding glad_glVertexAttribBinding
#endif
typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  glad_glVertexBindingDivisor(bindingindex, divisor);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexBindingDivisor\n", error);
    __debugbreak();
  }
}
#else
void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
#endif
#else
#define glVertexBindingDivisor glad_glVertexBindingDivisor
#endif
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  glad_glDebugMessageControl(source, type, severity, count, ids, enabled);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDebugMessageControl\n", error);
    __debugbreak();
  }
}
#else
void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#else
#define glDebugMessageControl glad_glDebugMessageControl
#endif
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLAPI PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
  glad_glDebugMessageInsert(source, type, id, severity, length, buf);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDebugMessageInsert\n", error);
    __debugbreak();
  }
}
#else
void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#else
#define glDebugMessageInsert glad_glDebugMessageInsert
#endif
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void *userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {
  glad_glDebugMessageCallback(callback, userParam);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDebugMessageCallback\n", error);
    __debugbreak();
  }
}
#else
void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
#endif
#else
#define glDebugMessageCallback glad_glDebugMessageCallback
#endif
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  GLuint result = glad_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetDebugMessageLog\n", error);
    __debugbreak();
  }
return result;
}
#else
GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#else
#define glGetDebugMessageLog glad_glGetDebugMessageLog
#endif
typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
GLAPI PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
  glad_glPushDebugGroup(source, id, length, message);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPushDebugGroup\n", error);
    __debugbreak();
  }
}
#else
void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#else
#define glPushDebugGroup glad_glPushDebugGroup
#endif
typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC)(void);
GLAPI PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPopDebugGroup(void) {
  glad_glPopDebugGroup();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPopDebugGroup\n", error);
    __debugbreak();
  }
}
#else
void glPopDebugGroup(void);
#endif
#else
#define glPopDebugGroup glad_glPopDebugGroup
#endif
typedef void (APIENTRYP PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GLAPI PFNGLOBJECTLABELPROC glad_glObjectLabel;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
  glad_glObjectLabel(identifier, name, length, label);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glObjectLabel\n", error);
    __debugbreak();
  }
}
#else
void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#else
#define glObjectLabel glad_glObjectLabel
#endif
typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
  glad_glGetObjectLabel(identifier, name, bufSize, length, label);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetObjectLabel\n", error);
    __debugbreak();
  }
}
#else
void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#else
#define glGetObjectLabel glad_glGetObjectLabel
#endif
typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC)(const void *ptr, GLsizei length, const GLchar *label);
GLAPI PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {
  glad_glObjectPtrLabel(ptr, length, label);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glObjectPtrLabel\n", error);
    __debugbreak();
  }
}
#else
void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
#endif
#else
#define glObjectPtrLabel glad_glObjectPtrLabel
#endif
typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
  glad_glGetObjectPtrLabel(ptr, bufSize, length, label);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetObjectPtrLabel\n", error);
    __debugbreak();
  }
}
#else
void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#else
#define glGetObjectPtrLabel glad_glGetObjectPtrLabel
#endif
typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void **params);
GLAPI PFNGLGETPOINTERVPROC glad_glGetPointerv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetPointerv(GLenum pname, void **params) {
  glad_glGetPointerv(pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetPointerv\n", error);
    __debugbreak();
  }
}
#else
void glGetPointerv(GLenum pname, void **params);
#endif
#else
#define glGetPointerv glad_glGetPointerv
#endif
#endif
#ifndef GL_VERSION_4_4
#define GL_VERSION_4_4 1
GLAPI int GLAD_GL_VERSION_4_4;
typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) {
  glad_glBufferStorage(target, size, data, flags);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBufferStorage\n", error);
    __debugbreak();
  }
}
#else
void glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
#endif
#else
#define glBufferStorage glad_glBufferStorage
#endif
typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) {
  glad_glClearTexImage(texture, level, format, type, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearTexImage\n", error);
    __debugbreak();
  }
}
#else
void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
#endif
#else
#define glClearTexImage glad_glClearTexImage
#endif
typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) {
  glad_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearTexSubImage\n", error);
    __debugbreak();
  }
}
#else
void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
#endif
#else
#define glClearTexSubImage glad_glClearTexSubImage
#endif
typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
GLAPI PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) {
  glad_glBindBuffersBase(target, first, count, buffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindBuffersBase\n", error);
    __debugbreak();
  }
}
#else
void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
#endif
#else
#define glBindBuffersBase glad_glBindBuffersBase
#endif
typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
GLAPI PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) {
  glad_glBindBuffersRange(target, first, count, buffers, offsets, sizes);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindBuffersRange\n", error);
    __debugbreak();
  }
}
#else
void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
#endif
#else
#define glBindBuffersRange glad_glBindBuffersRange
#endif
typedef void (APIENTRYP PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
GLAPI PFNGLBINDTEXTURESPROC glad_glBindTextures;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindTextures(GLuint first, GLsizei count, const GLuint *textures) {
  glad_glBindTextures(first, count, textures);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindTextures\n", error);
    __debugbreak();
  }
}
#else
void glBindTextures(GLuint first, GLsizei count, const GLuint *textures);
#endif
#else
#define glBindTextures glad_glBindTextures
#endif
typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint *samplers);
GLAPI PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) {
  glad_glBindSamplers(first, count, samplers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindSamplers\n", error);
    __debugbreak();
  }
}
#else
void glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
#endif
#else
#define glBindSamplers glad_glBindSamplers
#endif
typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
GLAPI PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) {
  glad_glBindImageTextures(first, count, textures);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindImageTextures\n", error);
    __debugbreak();
  }
}
#else
void glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
#endif
#else
#define glBindImageTextures glad_glBindImageTextures
#endif
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
GLAPI PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
  glad_glBindVertexBuffers(first, count, buffers, offsets, strides);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindVertexBuffers\n", error);
    __debugbreak();
  }
}
#else
void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
#endif
#else
#define glBindVertexBuffers glad_glBindVertexBuffers
#endif
#endif
#ifndef GL_VERSION_4_5
#define GL_VERSION_4_5 1
GLAPI int GLAD_GL_VERSION_4_5;
typedef void (APIENTRYP PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
GLAPI PFNGLCLIPCONTROLPROC glad_glClipControl;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClipControl(GLenum origin, GLenum depth) {
  glad_glClipControl(origin, depth);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClipControl\n", error);
    __debugbreak();
  }
}
#else
void glClipControl(GLenum origin, GLenum depth);
#endif
#else
#define glClipControl glad_glClipControl
#endif
typedef void (APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateTransformFeedbacks(GLsizei n, GLuint *ids) {
  glad_glCreateTransformFeedbacks(n, ids);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateTransformFeedbacks\n", error);
    __debugbreak();
  }
}
#else
void glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
#endif
#else
#define glCreateTransformFeedbacks glad_glCreateTransformFeedbacks
#endif
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
  glad_glTransformFeedbackBufferBase(xfb, index, buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTransformFeedbackBufferBase\n", error);
    __debugbreak();
  }
}
#else
void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
#endif
#else
#define glTransformFeedbackBufferBase glad_glTransformFeedbackBufferBase
#endif
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  glad_glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTransformFeedbackBufferRange\n", error);
    __debugbreak();
  }
}
#else
void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif
#else
#define glTransformFeedbackBufferRange glad_glTransformFeedbackBufferRange
#endif
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint *param);
GLAPI PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) {
  glad_glGetTransformFeedbackiv(xfb, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTransformFeedbackiv\n", error);
    __debugbreak();
  }
}
#else
void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
#endif
#else
#define glGetTransformFeedbackiv glad_glGetTransformFeedbackiv
#endif
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) {
  glad_glGetTransformFeedbacki_v(xfb, pname, index, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTransformFeedbacki_v\n", error);
    __debugbreak();
  }
}
#else
void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
#endif
#else
#define glGetTransformFeedbacki_v glad_glGetTransformFeedbacki_v
#endif
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {
  glad_glGetTransformFeedbacki64_v(xfb, pname, index, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTransformFeedbacki64_v\n", error);
    __debugbreak();
  }
}
#else
void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
#endif
#else
#define glGetTransformFeedbacki64_v glad_glGetTransformFeedbacki64_v
#endif
typedef void (APIENTRYP PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint *buffers);
GLAPI PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateBuffers(GLsizei n, GLuint *buffers) {
  glad_glCreateBuffers(n, buffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateBuffers\n", error);
    __debugbreak();
  }
}
#else
void glCreateBuffers(GLsizei n, GLuint *buffers);
#endif
#else
#define glCreateBuffers glad_glCreateBuffers
#endif
typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
  glad_glNamedBufferStorage(buffer, size, data, flags);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedBufferStorage\n", error);
    __debugbreak();
  }
}
#else
void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
#endif
#else
#define glNamedBufferStorage glad_glNamedBufferStorage
#endif
typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
GLAPI PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
  glad_glNamedBufferData(buffer, size, data, usage);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedBufferData\n", error);
    __debugbreak();
  }
}
#else
void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
#endif
#else
#define glNamedBufferData glad_glNamedBufferData
#endif
typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
  glad_glNamedBufferSubData(buffer, offset, size, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
#endif
#else
#define glNamedBufferSubData glad_glNamedBufferSubData
#endif
typedef void (APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  glad_glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyNamedBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
#endif
#else
#define glCopyNamedBufferSubData glad_glCopyNamedBufferSubData
#endif
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
  glad_glClearNamedBufferData(buffer, internalformat, format, type, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearNamedBufferData\n", error);
    __debugbreak();
  }
}
#else
void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
#endif
#else
#define glClearNamedBufferData glad_glClearNamedBufferData
#endif
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
  glad_glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearNamedBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
#endif
#else
#define glClearNamedBufferSubData glad_glClearNamedBufferSubData
#endif
typedef void * (APIENTRYP PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
GLAPI PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void * glMapNamedBuffer(GLuint buffer, GLenum access) {
  void * result = glad_glMapNamedBuffer(buffer, access);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMapNamedBuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
void * glMapNamedBuffer(GLuint buffer, GLenum access);
#endif
#else
#define glMapNamedBuffer glad_glMapNamedBuffer
#endif
typedef void * (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void * glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void * result = glad_glMapNamedBufferRange(buffer, offset, length, access);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMapNamedBufferRange\n", error);
    __debugbreak();
  }
return result;
}
#else
void * glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
#endif
#else
#define glMapNamedBufferRange glad_glMapNamedBufferRange
#endif
typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
GLAPI PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLboolean glUnmapNamedBuffer(GLuint buffer) {
  GLboolean result = glad_glUnmapNamedBuffer(buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glUnmapNamedBuffer\n", error);
    __debugbreak();
  }
return result;
}
#else
GLboolean glUnmapNamedBuffer(GLuint buffer);
#endif
#else
#define glUnmapNamedBuffer glad_glUnmapNamedBuffer
#endif
typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  glad_glFlushMappedNamedBufferRange(buffer, offset, length);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glFlushMappedNamedBufferRange\n", error);
    __debugbreak();
  }
}
#else
void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
#endif
#else
#define glFlushMappedNamedBufferRange glad_glFlushMappedNamedBufferRange
#endif
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint *params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {
  glad_glGetNamedBufferParameteriv(buffer, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedBufferParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
#endif
#else
#define glGetNamedBufferParameteriv glad_glGetNamedBufferParameteriv
#endif
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 *params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {
  glad_glGetNamedBufferParameteri64v(buffer, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedBufferParameteri64v\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
#endif
#else
#define glGetNamedBufferParameteri64v glad_glGetNamedBufferParameteri64v
#endif
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void **params);
GLAPI PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {
  glad_glGetNamedBufferPointerv(buffer, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedBufferPointerv\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
#endif
#else
#define glGetNamedBufferPointerv glad_glGetNamedBufferPointerv
#endif
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
GLAPI PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
  glad_glGetNamedBufferSubData(buffer, offset, size, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedBufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
#endif
#else
#define glGetNamedBufferSubData glad_glGetNamedBufferSubData
#endif
typedef void (APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
GLAPI PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateFramebuffers(GLsizei n, GLuint *framebuffers) {
  glad_glCreateFramebuffers(n, framebuffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateFramebuffers\n", error);
    __debugbreak();
  }
}
#else
void glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
#endif
#else
#define glCreateFramebuffers glad_glCreateFramebuffers
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  glad_glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferRenderbuffer\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
#endif
#else
#define glNamedFramebufferRenderbuffer glad_glNamedFramebufferRenderbuffer
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
  glad_glNamedFramebufferParameteri(framebuffer, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferParameteri\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
#endif
#else
#define glNamedFramebufferParameteri glad_glNamedFramebufferParameteri
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  glad_glNamedFramebufferTexture(framebuffer, attachment, texture, level);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferTexture\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
#endif
#else
#define glNamedFramebufferTexture glad_glNamedFramebufferTexture
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  glad_glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferTextureLayer\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
#endif
#else
#define glNamedFramebufferTextureLayer glad_glNamedFramebufferTextureLayer
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
  glad_glNamedFramebufferDrawBuffer(framebuffer, buf);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferDrawBuffer\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
#endif
#else
#define glNamedFramebufferDrawBuffer glad_glNamedFramebufferDrawBuffer
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
  glad_glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferDrawBuffers\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
#endif
#else
#define glNamedFramebufferDrawBuffers glad_glNamedFramebufferDrawBuffers
#endif
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
GLAPI PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
  glad_glNamedFramebufferReadBuffer(framebuffer, src);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedFramebufferReadBuffer\n", error);
    __debugbreak();
  }
}
#else
void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
#endif
#else
#define glNamedFramebufferReadBuffer glad_glNamedFramebufferReadBuffer
#endif
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) {
  glad_glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateNamedFramebufferData\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
#endif
#else
#define glInvalidateNamedFramebufferData glad_glInvalidateNamedFramebufferData
#endif
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glInvalidateNamedFramebufferSubData\n", error);
    __debugbreak();
  }
}
#else
void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glInvalidateNamedFramebufferSubData glad_glInvalidateNamedFramebufferSubData
#endif
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) {
  glad_glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearNamedFramebufferiv\n", error);
    __debugbreak();
  }
}
#else
void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
#endif
#else
#define glClearNamedFramebufferiv glad_glClearNamedFramebufferiv
#endif
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) {
  glad_glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearNamedFramebufferuiv\n", error);
    __debugbreak();
  }
}
#else
void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
#endif
#else
#define glClearNamedFramebufferuiv glad_glClearNamedFramebufferuiv
#endif
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) {
  glad_glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearNamedFramebufferfv\n", error);
    __debugbreak();
  }
}
#else
void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
#endif
#else
#define glClearNamedFramebufferfv glad_glClearNamedFramebufferfv
#endif
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  glad_glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glClearNamedFramebufferfi\n", error);
    __debugbreak();
  }
}
#else
void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
#endif
#else
#define glClearNamedFramebufferfi glad_glClearNamedFramebufferfi
#endif
typedef void (APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  glad_glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBlitNamedFramebuffer\n", error);
    __debugbreak();
  }
}
#else
void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#endif
#else
#define glBlitNamedFramebuffer glad_glBlitNamedFramebuffer
#endif
typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
  GLenum result = glad_glCheckNamedFramebufferStatus(framebuffer, target);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCheckNamedFramebufferStatus\n", error);
    __debugbreak();
  }
return result;
}
#else
GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
#endif
#else
#define glCheckNamedFramebufferStatus glad_glCheckNamedFramebufferStatus
#endif
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint *param);
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {
  glad_glGetNamedFramebufferParameteriv(framebuffer, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedFramebufferParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
#endif
#else
#define glGetNamedFramebufferParameteriv glad_glGetNamedFramebufferParameteriv
#endif
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
  glad_glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedFramebufferAttachmentParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
#endif
#else
#define glGetNamedFramebufferAttachmentParameteriv glad_glGetNamedFramebufferAttachmentParameteriv
#endif
typedef void (APIENTRYP PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
GLAPI PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) {
  glad_glCreateRenderbuffers(n, renderbuffers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateRenderbuffers\n", error);
    __debugbreak();
  }
}
#else
void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
#endif
#else
#define glCreateRenderbuffers glad_glCreateRenderbuffers
#endif
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  glad_glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedRenderbufferStorage\n", error);
    __debugbreak();
  }
}
#else
void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#else
#define glNamedRenderbufferStorage glad_glNamedRenderbufferStorage
#endif
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  glad_glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glNamedRenderbufferStorageMultisample\n", error);
    __debugbreak();
  }
}
#else
void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#else
#define glNamedRenderbufferStorageMultisample glad_glNamedRenderbufferStorageMultisample
#endif
typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint *params);
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {
  glad_glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetNamedRenderbufferParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
#endif
#else
#define glGetNamedRenderbufferParameteriv glad_glGetNamedRenderbufferParameteriv
#endif
typedef void (APIENTRYP PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint *textures);
GLAPI PFNGLCREATETEXTURESPROC glad_glCreateTextures;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateTextures(GLenum target, GLsizei n, GLuint *textures) {
  glad_glCreateTextures(target, n, textures);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateTextures\n", error);
    __debugbreak();
  }
}
#else
void glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
#endif
#else
#define glCreateTextures glad_glCreateTextures
#endif
typedef void (APIENTRYP PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
  glad_glTextureBuffer(texture, internalformat, buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureBuffer\n", error);
    __debugbreak();
  }
}
#else
void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
#endif
#else
#define glTextureBuffer glad_glTextureBuffer
#endif
typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  glad_glTextureBufferRange(texture, internalformat, buffer, offset, size);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureBufferRange\n", error);
    __debugbreak();
  }
}
#else
void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif
#else
#define glTextureBufferRange glad_glTextureBufferRange
#endif
typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
  glad_glTextureStorage1D(texture, levels, internalformat, width);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureStorage1D\n", error);
    __debugbreak();
  }
}
#else
void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
#endif
#else
#define glTextureStorage1D glad_glTextureStorage1D
#endif
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  glad_glTextureStorage2D(texture, levels, internalformat, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureStorage2D\n", error);
    __debugbreak();
  }
}
#else
void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#else
#define glTextureStorage2D glad_glTextureStorage2D
#endif
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  glad_glTextureStorage3D(texture, levels, internalformat, width, height, depth);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureStorage3D\n", error);
    __debugbreak();
  }
}
#else
void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
#endif
#else
#define glTextureStorage3D glad_glTextureStorage3D
#endif
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  glad_glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureStorage2DMultisample\n", error);
    __debugbreak();
  }
}
#else
void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
#endif
#else
#define glTextureStorage2DMultisample glad_glTextureStorage2DMultisample
#endif
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  glad_glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureStorage3DMultisample\n", error);
    __debugbreak();
  }
}
#else
void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif
#else
#define glTextureStorage3DMultisample glad_glTextureStorage3DMultisample
#endif
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  glad_glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureSubImage1D\n", error);
    __debugbreak();
  }
}
#else
void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTextureSubImage1D glad_glTextureSubImage1D
#endif
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  glad_glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureSubImage2D\n", error);
    __debugbreak();
  }
}
#else
void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTextureSubImage2D glad_glTextureSubImage2D
#endif
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  glad_glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureSubImage3D\n", error);
    __debugbreak();
  }
}
#else
void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
#endif
#else
#define glTextureSubImage3D glad_glTextureSubImage3D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
  glad_glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTextureSubImage1D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTextureSubImage1D glad_glCompressedTextureSubImage1D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
  glad_glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTextureSubImage2D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTextureSubImage2D glad_glCompressedTextureSubImage2D
#endif
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
  glad_glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCompressedTextureSubImage3D\n", error);
    __debugbreak();
  }
}
#else
void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
#endif
#else
#define glCompressedTextureSubImage3D glad_glCompressedTextureSubImage3D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  glad_glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTextureSubImage1D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
#endif
#else
#define glCopyTextureSubImage1D glad_glCopyTextureSubImage1D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTextureSubImage2D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glCopyTextureSubImage2D glad_glCopyTextureSubImage2D
#endif
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  glad_glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCopyTextureSubImage3D\n", error);
    __debugbreak();
  }
}
#else
void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#else
#define glCopyTextureSubImage3D glad_glCopyTextureSubImage3D
#endif
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
GLAPI PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
  glad_glTextureParameterf(texture, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureParameterf\n", error);
    __debugbreak();
  }
}
#else
void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
#endif
#else
#define glTextureParameterf glad_glTextureParameterf
#endif
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat *param);
GLAPI PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) {
  glad_glTextureParameterfv(texture, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
#endif
#else
#define glTextureParameterfv glad_glTextureParameterfv
#endif
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
GLAPI PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
  glad_glTextureParameteri(texture, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureParameteri\n", error);
    __debugbreak();
  }
}
#else
void glTextureParameteri(GLuint texture, GLenum pname, GLint param);
#endif
#else
#define glTextureParameteri glad_glTextureParameteri
#endif
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint *params);
GLAPI PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) {
  glad_glTextureParameterIiv(texture, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureParameterIiv\n", error);
    __debugbreak();
  }
}
#else
void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
#endif
#else
#define glTextureParameterIiv glad_glTextureParameterIiv
#endif
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint *params);
GLAPI PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) {
  glad_glTextureParameterIuiv(texture, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureParameterIuiv\n", error);
    __debugbreak();
  }
}
#else
void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
#endif
#else
#define glTextureParameterIuiv glad_glTextureParameterIuiv
#endif
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint *param);
GLAPI PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) {
  glad_glTextureParameteriv(texture, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
#endif
#else
#define glTextureParameteriv glad_glTextureParameteriv
#endif
typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
GLAPI PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGenerateTextureMipmap(GLuint texture) {
  glad_glGenerateTextureMipmap(texture);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGenerateTextureMipmap\n", error);
    __debugbreak();
  }
}
#else
void glGenerateTextureMipmap(GLuint texture);
#endif
#else
#define glGenerateTextureMipmap glad_glGenerateTextureMipmap
#endif
typedef void (APIENTRYP PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
GLAPI PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glBindTextureUnit(GLuint unit, GLuint texture) {
  glad_glBindTextureUnit(unit, texture);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glBindTextureUnit\n", error);
    __debugbreak();
  }
}
#else
void glBindTextureUnit(GLuint unit, GLuint texture);
#endif
#else
#define glBindTextureUnit glad_glBindTextureUnit
#endif
typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  glad_glGetTextureImage(texture, level, format, type, bufSize, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureImage\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
#endif
#else
#define glGetTextureImage glad_glGetTextureImage
#endif
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) {
  glad_glGetCompressedTextureImage(texture, level, bufSize, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetCompressedTextureImage\n", error);
    __debugbreak();
  }
}
#else
void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
#endif
#else
#define glGetCompressedTextureImage glad_glGetCompressedTextureImage
#endif
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) {
  glad_glGetTextureLevelParameterfv(texture, level, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureLevelParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
#endif
#else
#define glGetTextureLevelParameterfv glad_glGetTextureLevelParameterfv
#endif
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) {
  glad_glGetTextureLevelParameteriv(texture, level, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureLevelParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
#endif
#else
#define glGetTextureLevelParameteriv glad_glGetTextureLevelParameteriv
#endif
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) {
  glad_glGetTextureParameterfv(texture, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureParameterfv\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
#endif
#else
#define glGetTextureParameterfv glad_glGetTextureParameterfv
#endif
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) {
  glad_glGetTextureParameterIiv(texture, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureParameterIiv\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
#endif
#else
#define glGetTextureParameterIiv glad_glGetTextureParameterIiv
#endif
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint *params);
GLAPI PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) {
  glad_glGetTextureParameterIuiv(texture, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureParameterIuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
#endif
#else
#define glGetTextureParameterIuiv glad_glGetTextureParameterIuiv
#endif
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) {
  glad_glGetTextureParameteriv(texture, pname, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureParameteriv\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
#endif
#else
#define glGetTextureParameteriv glad_glGetTextureParameteriv
#endif
typedef void (APIENTRYP PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
GLAPI PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateVertexArrays(GLsizei n, GLuint *arrays) {
  glad_glCreateVertexArrays(n, arrays);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateVertexArrays\n", error);
    __debugbreak();
  }
}
#else
void glCreateVertexArrays(GLsizei n, GLuint *arrays);
#endif
#else
#define glCreateVertexArrays glad_glCreateVertexArrays
#endif
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  glad_glDisableVertexArrayAttrib(vaobj, index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glDisableVertexArrayAttrib\n", error);
    __debugbreak();
  }
}
#else
void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
#endif
#else
#define glDisableVertexArrayAttrib glad_glDisableVertexArrayAttrib
#endif
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  glad_glEnableVertexArrayAttrib(vaobj, index);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glEnableVertexArrayAttrib\n", error);
    __debugbreak();
  }
}
#else
void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
#endif
#else
#define glEnableVertexArrayAttrib glad_glEnableVertexArrayAttrib
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
GLAPI PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
  glad_glVertexArrayElementBuffer(vaobj, buffer);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayElementBuffer\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
#endif
#else
#define glVertexArrayElementBuffer glad_glVertexArrayElementBuffer
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  glad_glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayVertexBuffer\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
#endif
#else
#define glVertexArrayVertexBuffer glad_glVertexArrayVertexBuffer
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
  glad_glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayVertexBuffers\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
#endif
#else
#define glVertexArrayVertexBuffers glad_glVertexArrayVertexBuffers
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  glad_glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayAttribBinding\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
#endif
#else
#define glVertexArrayAttribBinding glad_glVertexArrayAttribBinding
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  glad_glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayAttribFormat\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
#endif
#else
#define glVertexArrayAttribFormat glad_glVertexArrayAttribFormat
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  glad_glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayAttribIFormat\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
#endif
#else
#define glVertexArrayAttribIFormat glad_glVertexArrayAttribIFormat
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  glad_glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayAttribLFormat\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
#endif
#else
#define glVertexArrayAttribLFormat glad_glVertexArrayAttribLFormat
#endif
typedef void (APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  glad_glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glVertexArrayBindingDivisor\n", error);
    __debugbreak();
  }
}
#else
void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
#endif
#else
#define glVertexArrayBindingDivisor glad_glVertexArrayBindingDivisor
#endif
typedef void (APIENTRYP PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint *param);
GLAPI PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) {
  glad_glGetVertexArrayiv(vaobj, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexArrayiv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
#endif
#else
#define glGetVertexArrayiv glad_glGetVertexArrayiv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
GLAPI PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
  glad_glGetVertexArrayIndexediv(vaobj, index, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexArrayIndexediv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
#endif
#else
#define glGetVertexArrayIndexediv glad_glGetVertexArrayIndexediv
#endif
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
GLAPI PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {
  glad_glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetVertexArrayIndexed64iv\n", error);
    __debugbreak();
  }
}
#else
void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
#endif
#else
#define glGetVertexArrayIndexed64iv glad_glGetVertexArrayIndexed64iv
#endif
typedef void (APIENTRYP PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint *samplers);
GLAPI PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateSamplers(GLsizei n, GLuint *samplers) {
  glad_glCreateSamplers(n, samplers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateSamplers\n", error);
    __debugbreak();
  }
}
#else
void glCreateSamplers(GLsizei n, GLuint *samplers);
#endif
#else
#define glCreateSamplers glad_glCreateSamplers
#endif
typedef void (APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
GLAPI PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateProgramPipelines(GLsizei n, GLuint *pipelines) {
  glad_glCreateProgramPipelines(n, pipelines);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateProgramPipelines\n", error);
    __debugbreak();
  }
}
#else
void glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
#endif
#else
#define glCreateProgramPipelines glad_glCreateProgramPipelines
#endif
typedef void (APIENTRYP PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint *ids);
GLAPI PFNGLCREATEQUERIESPROC glad_glCreateQueries;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glCreateQueries(GLenum target, GLsizei n, GLuint *ids) {
  glad_glCreateQueries(target, n, ids);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glCreateQueries\n", error);
    __debugbreak();
  }
}
#else
void glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
#endif
#else
#define glCreateQueries glad_glCreateQueries
#endif
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  glad_glGetQueryBufferObjecti64v(id, buffer, pname, offset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryBufferObjecti64v\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
#endif
#else
#define glGetQueryBufferObjecti64v glad_glGetQueryBufferObjecti64v
#endif
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  glad_glGetQueryBufferObjectiv(id, buffer, pname, offset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryBufferObjectiv\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
#endif
#else
#define glGetQueryBufferObjectiv glad_glGetQueryBufferObjectiv
#endif
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  glad_glGetQueryBufferObjectui64v(id, buffer, pname, offset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryBufferObjectui64v\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
#endif
#else
#define glGetQueryBufferObjectui64v glad_glGetQueryBufferObjectui64v
#endif
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  glad_glGetQueryBufferObjectuiv(id, buffer, pname, offset);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetQueryBufferObjectuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
#endif
#else
#define glGetQueryBufferObjectuiv glad_glGetQueryBufferObjectuiv
#endif
typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMemoryBarrierByRegion(GLbitfield barriers) {
  glad_glMemoryBarrierByRegion(barriers);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMemoryBarrierByRegion\n", error);
    __debugbreak();
  }
}
#else
void glMemoryBarrierByRegion(GLbitfield barriers);
#endif
#else
#define glMemoryBarrierByRegion glad_glMemoryBarrierByRegion
#endif
typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  glad_glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetTextureSubImage\n", error);
    __debugbreak();
  }
}
#else
void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
#endif
#else
#define glGetTextureSubImage glad_glGetTextureSubImage
#endif
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {
  glad_glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetCompressedTextureSubImage\n", error);
    __debugbreak();
  }
}
#else
void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
#endif
#else
#define glGetCompressedTextureSubImage glad_glGetCompressedTextureSubImage
#endif
typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
GLAPI PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
GLenum glGetGraphicsResetStatus(void) {
  GLenum result = glad_glGetGraphicsResetStatus();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetGraphicsResetStatus\n", error);
    __debugbreak();
  }
return result;
}
#else
GLenum glGetGraphicsResetStatus(void);
#endif
#else
#define glGetGraphicsResetStatus glad_glGetGraphicsResetStatus
#endif
typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels) {
  glad_glGetnCompressedTexImage(target, lod, bufSize, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnCompressedTexImage\n", error);
    __debugbreak();
  }
}
#else
void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
#endif
#else
#define glGetnCompressedTexImage glad_glGetnCompressedTexImage
#endif
typedef void (APIENTRYP PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
  glad_glGetnTexImage(target, level, format, type, bufSize, pixels);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnTexImage\n", error);
    __debugbreak();
  }
}
#else
void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
#endif
#else
#define glGetnTexImage glad_glGetnTexImage
#endif
typedef void (APIENTRYP PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
GLAPI PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
  glad_glGetnUniformdv(program, location, bufSize, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnUniformdv\n", error);
    __debugbreak();
  }
}
#else
void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
#endif
#else
#define glGetnUniformdv glad_glGetnUniformdv
#endif
typedef void (APIENTRYP PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GLAPI PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  glad_glGetnUniformfv(program, location, bufSize, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnUniformfv\n", error);
    __debugbreak();
  }
}
#else
void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
#endif
#else
#define glGetnUniformfv glad_glGetnUniformfv
#endif
typedef void (APIENTRYP PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
GLAPI PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  glad_glGetnUniformiv(program, location, bufSize, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnUniformiv\n", error);
    __debugbreak();
  }
}
#else
void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
#endif
#else
#define glGetnUniformiv glad_glGetnUniformiv
#endif
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
GLAPI PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  glad_glGetnUniformuiv(program, location, bufSize, params);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnUniformuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
#endif
#else
#define glGetnUniformuiv glad_glGetnUniformuiv
#endif
typedef void (APIENTRYP PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
GLAPI PFNGLREADNPIXELSPROC glad_glReadnPixels;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
  glad_glReadnPixels(x, y, width, height, format, type, bufSize, data);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glReadnPixels\n", error);
    __debugbreak();
  }
}
#else
void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
#endif
#else
#define glReadnPixels glad_glReadnPixels
#endif
typedef void (APIENTRYP PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
GLAPI PFNGLGETNMAPDVPROC glad_glGetnMapdv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {
  glad_glGetnMapdv(target, query, bufSize, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnMapdv\n", error);
    __debugbreak();
  }
}
#else
void glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
#endif
#else
#define glGetnMapdv glad_glGetnMapdv
#endif
typedef void (APIENTRYP PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
GLAPI PFNGLGETNMAPFVPROC glad_glGetnMapfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {
  glad_glGetnMapfv(target, query, bufSize, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnMapfv\n", error);
    __debugbreak();
  }
}
#else
void glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
#endif
#else
#define glGetnMapfv glad_glGetnMapfv
#endif
typedef void (APIENTRYP PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
GLAPI PFNGLGETNMAPIVPROC glad_glGetnMapiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v) {
  glad_glGetnMapiv(target, query, bufSize, v);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnMapiv\n", error);
    __debugbreak();
  }
}
#else
void glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
#endif
#else
#define glGetnMapiv glad_glGetnMapiv
#endif
typedef void (APIENTRYP PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat *values);
GLAPI PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values) {
  glad_glGetnPixelMapfv(map, bufSize, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnPixelMapfv\n", error);
    __debugbreak();
  }
}
#else
void glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values);
#endif
#else
#define glGetnPixelMapfv glad_glGetnPixelMapfv
#endif
typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint *values);
GLAPI PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values) {
  glad_glGetnPixelMapuiv(map, bufSize, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnPixelMapuiv\n", error);
    __debugbreak();
  }
}
#else
void glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values);
#endif
#else
#define glGetnPixelMapuiv glad_glGetnPixelMapuiv
#endif
typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort *values);
GLAPI PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values) {
  glad_glGetnPixelMapusv(map, bufSize, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnPixelMapusv\n", error);
    __debugbreak();
  }
}
#else
void glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values);
#endif
#else
#define glGetnPixelMapusv glad_glGetnPixelMapusv
#endif
typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte *pattern);
GLAPI PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern) {
  glad_glGetnPolygonStipple(bufSize, pattern);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnPolygonStipple\n", error);
    __debugbreak();
  }
}
#else
void glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern);
#endif
#else
#define glGetnPolygonStipple glad_glGetnPolygonStipple
#endif
typedef void (APIENTRYP PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
GLAPI PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {
  glad_glGetnColorTable(target, format, type, bufSize, table);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnColorTable\n", error);
    __debugbreak();
  }
}
#else
void glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
#endif
#else
#define glGetnColorTable glad_glGetnColorTable
#endif
typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
GLAPI PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {
  glad_glGetnConvolutionFilter(target, format, type, bufSize, image);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnConvolutionFilter\n", error);
    __debugbreak();
  }
}
#else
void glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
#endif
#else
#define glGetnConvolutionFilter glad_glGetnConvolutionFilter
#endif
typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
GLAPI PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {
  glad_glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnSeparableFilter\n", error);
    __debugbreak();
  }
}
#else
void glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
#endif
#else
#define glGetnSeparableFilter glad_glGetnSeparableFilter
#endif
typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
GLAPI PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
  glad_glGetnHistogram(target, reset, format, type, bufSize, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnHistogram\n", error);
    __debugbreak();
  }
}
#else
void glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
#endif
#else
#define glGetnHistogram glad_glGetnHistogram
#endif
typedef void (APIENTRYP PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
GLAPI PFNGLGETNMINMAXPROC glad_glGetnMinmax;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
  glad_glGetnMinmax(target, reset, format, type, bufSize, values);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glGetnMinmax\n", error);
    __debugbreak();
  }
}
#else
void glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
#endif
#else
#define glGetnMinmax glad_glGetnMinmax
#endif
typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC)(void);
GLAPI PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glTextureBarrier(void) {
  glad_glTextureBarrier();
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glTextureBarrier\n", error);
    __debugbreak();
  }
}
#else
void glTextureBarrier(void);
#endif
#else
#define glTextureBarrier glad_glTextureBarrier
#endif
#endif
#ifndef GL_VERSION_4_6
#define GL_VERSION_4_6 1
GLAPI int GLAD_GL_VERSION_4_6;
typedef void (APIENTRYP PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
GLAPI PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) {
  glad_glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glSpecializeShader\n", error);
    __debugbreak();
  }
}
#else
void glSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
#endif
#else
#define glSpecializeShader glad_glSpecializeShader
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  glad_glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawArraysIndirectCount\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#endif
#else
#define glMultiDrawArraysIndirectCount glad_glMultiDrawArraysIndirectCount
#endif
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  glad_glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glMultiDrawElementsIndirectCount\n", error);
    __debugbreak();
  }
}
#else
void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
#endif
#else
#define glMultiDrawElementsIndirectCount glad_glMultiDrawElementsIndirectCount
#endif
typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
GLAPI PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp;
#ifdef GLAD_WRAPPER_ENABLED
#ifdef GLAD_WRAPPER_IMPLEMENTATION
void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
  glad_glPolygonOffsetClamp(factor, units, clamp);
  GLenum error = 0;
  while ((error = glad_glGetError()) != 0) {
    fprintf(stderr, "GL error %u: glPolygonOffsetClamp\n", error);
    __debugbreak();
  }
}
#else
void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp);
#endif
#else
#define glPolygonOffsetClamp glad_glPolygonOffsetClamp
#endif
#endif

#ifdef __cplusplus
}
#endif

#endif
